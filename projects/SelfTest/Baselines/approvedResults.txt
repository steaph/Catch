
CatchSelfTest is a CATCH v0.9 b25 (integration) host application.
Run with -? for options

-------------------------------------------------------------------------------
./succeeding/Approx/simple
...............................................................................

ApproxTests.cpp:20:
PASSED:
  REQUIRE( d == Approx( 1.23 ) )
with expansion:
  1.23 == Approx( 1.23 )

ApproxTests.cpp:21:
PASSED:
  REQUIRE( d != Approx( 1.22 ) )
with expansion:
  1.23 != Approx( 1.22 )

ApproxTests.cpp:22:
PASSED:
  REQUIRE( d != Approx( 1.24 ) )
with expansion:
  1.23 != Approx( 1.24 )

ApproxTests.cpp:24:
PASSED:
  REQUIRE( Approx( d ) == 1.23 )
with expansion:
  Approx( 1.23 ) == 1.23

ApproxTests.cpp:25:
PASSED:
  REQUIRE( Approx( d ) != 1.22 )
with expansion:
  Approx( 1.23 ) != 1.22

ApproxTests.cpp:26:
PASSED:
  REQUIRE( Approx( d ) != 1.24 )
with expansion:
  Approx( 1.23 ) != 1.24

-------------------------------------------------------------------------------
./succeeding/Approx/epsilon
...............................................................................

ApproxTests.cpp:38:
PASSED:
  REQUIRE( d != Approx( 1.231 ) )
with expansion:
  1.23 != Approx( 1.231 )

ApproxTests.cpp:39:
PASSED:
  REQUIRE( d == Approx( 1.231 ).epsilon( 0.1 ) )
with expansion:
  1.23 == Approx( 1.231 )

-------------------------------------------------------------------------------
./succeeding/Approx/float
...............................................................................

ApproxTests.cpp:49:
PASSED:
  REQUIRE( 1.23f == Approx( 1.23f ) )
with expansion:
  1.23 == Approx( 1.23 )

ApproxTests.cpp:50:
PASSED:
  REQUIRE( 0.0f == Approx( 0.0f ) )
with expansion:
  0 == Approx( 0 )

-------------------------------------------------------------------------------
./succeeding/Approx/int
...............................................................................

ApproxTests.cpp:60:
PASSED:
  REQUIRE( 1 == Approx( 1 ) )

ApproxTests.cpp:61:
PASSED:
  REQUIRE( 0 == Approx( 0 ) )

-------------------------------------------------------------------------------
./succeeding/Approx/mixed
...............................................................................

ApproxTests.cpp:75:
PASSED:
  REQUIRE( 1.0f == Approx( 1 ) )
with expansion:
  1 == Approx( 1 )

ApproxTests.cpp:76:
PASSED:
  REQUIRE( 0 == Approx( dZero) )
with expansion:
  0 == Approx( 0 )

ApproxTests.cpp:77:
PASSED:
  REQUIRE( 0 == Approx( dSmall ).epsilon( 0.001 ) )
with expansion:
  0 == Approx( 1e-05 )

ApproxTests.cpp:78:
PASSED:
  REQUIRE( 1.234f == Approx( dMedium ) )
with expansion:
  1.234 == Approx( 1.234 )

ApproxTests.cpp:79:
PASSED:
  REQUIRE( dMedium == Approx( 1.234f ) )
with expansion:
  1.234 == Approx( 1.234 )

-------------------------------------------------------------------------------
./succeeding/Approx/custom
...............................................................................

ApproxTests.cpp:93:
PASSED:
  REQUIRE( d == approx( 1.23 ) )
with expansion:
  1.23 == Approx( 1.23 )

ApproxTests.cpp:94:
PASSED:
  REQUIRE( d == approx( 1.22 ) )
with expansion:
  1.23 == Approx( 1.22 )

ApproxTests.cpp:95:
PASSED:
  REQUIRE( d == approx( 1.24 ) )
with expansion:
  1.23 == Approx( 1.24 )

ApproxTests.cpp:96:
PASSED:
  REQUIRE( d != approx( 1.25 ) )
with expansion:
  1.23 != Approx( 1.25 )

ApproxTests.cpp:98:
PASSED:
  REQUIRE( approx( d ) == 1.23 )
with expansion:
  Approx( 1.23 ) == 1.23

ApproxTests.cpp:99:
PASSED:
  REQUIRE( approx( d ) == 1.22 )
with expansion:
  Approx( 1.23 ) == 1.22

ApproxTests.cpp:100:
PASSED:
  REQUIRE( approx( d ) == 1.24 )
with expansion:
  Approx( 1.23 ) == 1.24

ApproxTests.cpp:101:
PASSED:
  REQUIRE( approx( d ) != 1.25 )
with expansion:
  Approx( 1.23 ) != 1.25

-------------------------------------------------------------------------------
Approximate PI
...............................................................................

ApproxTests.cpp:110:
PASSED:
  REQUIRE( divide( 22, 7 ) == Approx( 3.141 ).epsilon( 0.001 ) )
with expansion:
  3.142857142857143 == Approx( 3.141 )

ApproxTests.cpp:111:
PASSED:
  REQUIRE( divide( 22, 7 ) != Approx( 3.141 ).epsilon( 0.0001 ) )
with expansion:
  3.142857142857143 != Approx( 3.141 )

-------------------------------------------------------------------------------
./succeeding/TestClass/succeedingCase
...............................................................................

ClassTests.cpp:24:
PASSED:
  REQUIRE( s == "hello" )
with expansion:
  "hello" == "hello"

-------------------------------------------------------------------------------
./failing/TestClass/failingCase
...............................................................................

ClassTests.cpp:28: FAILED:
  REQUIRE( s == "world" )
with expansion:
  "hello" == "world"

-------------------------------------------------------------------------------
./succeeding/Fixture/succeedingCase
...............................................................................

ClassTests.cpp:47:
PASSED:
  REQUIRE( m_a == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
./failing/Fixture/failingCase
...............................................................................

ClassTests.cpp:55: FAILED:
  REQUIRE( m_a == 2 )
with expansion:
  1 == 2

-------------------------------------------------------------------------------
./succeeding/conditions/equality
...............................................................................

ConditionTests.cpp:55:
PASSED:
  REQUIRE( data.int_seven == 7 )
with expansion:
  7 == 7

ConditionTests.cpp:56:
PASSED:
  REQUIRE( data.float_nine_point_one == Approx( 9.1f ) )
with expansion:
  9.1 == Approx( 9.1 )

ConditionTests.cpp:57:
PASSED:
  REQUIRE( data.double_pi == Approx( 3.1415926535 ) )
with expansion:
  3.1415926535 == Approx( 3.14159 )

ConditionTests.cpp:58:
PASSED:
  REQUIRE( data.str_hello == "hello" )
with expansion:
  "hello" == "hello"

ConditionTests.cpp:59:
PASSED:
  REQUIRE( "hello" == data.str_hello )
with expansion:
  "hello" == "hello"

ConditionTests.cpp:60:
PASSED:
  REQUIRE( data.str_hello.size() == 5 )
with expansion:
  5 == 5

ConditionTests.cpp:63:
PASSED:
  REQUIRE( x == Approx( 1.3 ) )
with expansion:
  1.3 == Approx( 1.3 )

-------------------------------------------------------------------------------
./failing/conditions/equality
...............................................................................

ConditionTests.cpp:71: FAILED:
  CHECK( data.int_seven == 6 )
with expansion:
  7 == 6

ConditionTests.cpp:72: FAILED:
  CHECK( data.int_seven == 8 )
with expansion:
  7 == 8

ConditionTests.cpp:73: FAILED:
  CHECK( data.int_seven == 0 )
with expansion:
  7 == 0

ConditionTests.cpp:74: FAILED:
  CHECK( data.float_nine_point_one == Approx( 9.11f ) )
with expansion:
  9.1 == Approx( 9.11 )

ConditionTests.cpp:75: FAILED:
  CHECK( data.float_nine_point_one == Approx( 9.0f ) )
with expansion:
  9.1 == Approx( 9 )

ConditionTests.cpp:76: FAILED:
  CHECK( data.float_nine_point_one == Approx( 1 ) )
with expansion:
  9.1 == Approx( 1 )

ConditionTests.cpp:77: FAILED:
  CHECK( data.float_nine_point_one == Approx( 0 ) )
with expansion:
  9.1 == Approx( 0 )

ConditionTests.cpp:78: FAILED:
  CHECK( data.double_pi == Approx( 3.1415 ) )
with expansion:
  3.1415926535 == Approx( 3.1415 )

ConditionTests.cpp:79: FAILED:
  CHECK( data.str_hello == "goodbye" )
with expansion:
  "hello" == "goodbye"

ConditionTests.cpp:80: FAILED:
  CHECK( data.str_hello == "hell" )
with expansion:
  "hello" == "hell"

ConditionTests.cpp:81: FAILED:
  CHECK( data.str_hello == "hello1" )
with expansion:
  "hello" == "hello1"

ConditionTests.cpp:82: FAILED:
  CHECK( data.str_hello.size() == 6 )
with expansion:
  5 == 6

ConditionTests.cpp:85: FAILED:
  CHECK( x == Approx( 1.301 ) )
with expansion:
  1.3 == Approx( 1.301 )

-------------------------------------------------------------------------------
./succeeding/conditions/inequality
...............................................................................

ConditionTests.cpp:93:
PASSED:
  REQUIRE( data.int_seven != 6 )
with expansion:
  7 != 6

ConditionTests.cpp:94:
PASSED:
  REQUIRE( data.int_seven != 8 )
with expansion:
  7 != 8

ConditionTests.cpp:95:
PASSED:
  REQUIRE( data.float_nine_point_one != Approx( 9.11f ) )
with expansion:
  9.1 != Approx( 9.11 )

ConditionTests.cpp:96:
PASSED:
  REQUIRE( data.float_nine_point_one != Approx( 9.0f ) )
with expansion:
  9.1 != Approx( 9 )

ConditionTests.cpp:97:
PASSED:
  REQUIRE( data.float_nine_point_one != Approx( 1 ) )
with expansion:
  9.1 != Approx( 1 )

ConditionTests.cpp:98:
PASSED:
  REQUIRE( data.float_nine_point_one != Approx( 0 ) )
with expansion:
  9.1 != Approx( 0 )

ConditionTests.cpp:99:
PASSED:
  REQUIRE( data.double_pi != Approx( 3.1415 ) )
with expansion:
  3.1415926535 != Approx( 3.1415 )

ConditionTests.cpp:100:
PASSED:
  REQUIRE( data.str_hello != "goodbye" )
with expansion:
  "hello" != "goodbye"

ConditionTests.cpp:101:
PASSED:
  REQUIRE( data.str_hello != "hell" )
with expansion:
  "hello" != "hell"

ConditionTests.cpp:102:
PASSED:
  REQUIRE( data.str_hello != "hello1" )
with expansion:
  "hello" != "hello1"

ConditionTests.cpp:103:
PASSED:
  REQUIRE( data.str_hello.size() != 6 )
with expansion:
  5 != 6

-------------------------------------------------------------------------------
./failing/conditions/inequality
...............................................................................

ConditionTests.cpp:111: FAILED:
  CHECK( data.int_seven != 7 )
with expansion:
  7 != 7

ConditionTests.cpp:112: FAILED:
  CHECK( data.float_nine_point_one != Approx( 9.1f ) )
with expansion:
  9.1 != Approx( 9.1 )

ConditionTests.cpp:113: FAILED:
  CHECK( data.double_pi != Approx( 3.1415926535 ) )
with expansion:
  3.1415926535 != Approx( 3.14159 )

ConditionTests.cpp:114: FAILED:
  CHECK( data.str_hello != "hello" )
with expansion:
  "hello" != "hello"

ConditionTests.cpp:115: FAILED:
  CHECK( data.str_hello.size() != 5 )
with expansion:
  5 != 5

-------------------------------------------------------------------------------
./succeeding/conditions/ordered
...............................................................................

ConditionTests.cpp:124:
PASSED:
  REQUIRE( data.int_seven < 8 )
with expansion:
  7 < 8

ConditionTests.cpp:125:
PASSED:
  REQUIRE( data.int_seven > 6 )
with expansion:
  7 > 6

ConditionTests.cpp:126:
PASSED:
  REQUIRE( data.int_seven > 0 )
with expansion:
  7 > 0

ConditionTests.cpp:127:
PASSED:
  REQUIRE( data.int_seven > -1 )
with expansion:
  7 > -1

ConditionTests.cpp:129:
PASSED:
  REQUIRE( data.int_seven >= 7 )
with expansion:
  7 >= 7

ConditionTests.cpp:130:
PASSED:
  REQUIRE( data.int_seven >= 6 )
with expansion:
  7 >= 6

ConditionTests.cpp:131:
PASSED:
  REQUIRE( data.int_seven <= 7 )
with expansion:
  7 <= 7

ConditionTests.cpp:132:
PASSED:
  REQUIRE( data.int_seven <= 8 )
with expansion:
  7 <= 8

ConditionTests.cpp:134:
PASSED:
  REQUIRE( data.float_nine_point_one > 9 )
with expansion:
  9.1 > 9

ConditionTests.cpp:135:
PASSED:
  REQUIRE( data.float_nine_point_one < 10 )
with expansion:
  9.1 < 10

ConditionTests.cpp:136:
PASSED:
  REQUIRE( data.float_nine_point_one < 9.2 )
with expansion:
  9.1 < 9.199999999999999

ConditionTests.cpp:138:
PASSED:
  REQUIRE( data.str_hello <= "hello" )
with expansion:
  "hello" <= "hello"

ConditionTests.cpp:139:
PASSED:
  REQUIRE( data.str_hello >= "hello" )
with expansion:
  "hello" >= "hello"

ConditionTests.cpp:141:
PASSED:
  REQUIRE( data.str_hello < "hellp" )
with expansion:
  "hello" < "hellp"

ConditionTests.cpp:142:
PASSED:
  REQUIRE( data.str_hello < "zebra" )
with expansion:
  "hello" < "zebra"

ConditionTests.cpp:143:
PASSED:
  REQUIRE( data.str_hello > "hellm" )
with expansion:
  "hello" > "hellm"

ConditionTests.cpp:144:
PASSED:
  REQUIRE( data.str_hello > "a" )
with expansion:
  "hello" > "a"

-------------------------------------------------------------------------------
./failing/conditions/ordered
...............................................................................

ConditionTests.cpp:152: FAILED:
  CHECK( data.int_seven > 7 )
with expansion:
  7 > 7

ConditionTests.cpp:153: FAILED:
  CHECK( data.int_seven < 7 )
with expansion:
  7 < 7

ConditionTests.cpp:154: FAILED:
  CHECK( data.int_seven > 8 )
with expansion:
  7 > 8

ConditionTests.cpp:155: FAILED:
  CHECK( data.int_seven < 6 )
with expansion:
  7 < 6

ConditionTests.cpp:156: FAILED:
  CHECK( data.int_seven < 0 )
with expansion:
  7 < 0

ConditionTests.cpp:157: FAILED:
  CHECK( data.int_seven < -1 )
with expansion:
  7 < -1

ConditionTests.cpp:159: FAILED:
  CHECK( data.int_seven >= 8 )
with expansion:
  7 >= 8

ConditionTests.cpp:160: FAILED:
  CHECK( data.int_seven <= 6 )
with expansion:
  7 <= 6

ConditionTests.cpp:162: FAILED:
  CHECK( data.float_nine_point_one < 9 )
with expansion:
  9.1 < 9

ConditionTests.cpp:163: FAILED:
  CHECK( data.float_nine_point_one > 10 )
with expansion:
  9.1 > 10

ConditionTests.cpp:164: FAILED:
  CHECK( data.float_nine_point_one > 9.2 )
with expansion:
  9.1 > 9.199999999999999

ConditionTests.cpp:166: FAILED:
  CHECK( data.str_hello > "hello" )
with expansion:
  "hello" > "hello"

ConditionTests.cpp:167: FAILED:
  CHECK( data.str_hello < "hello" )
with expansion:
  "hello" < "hello"

ConditionTests.cpp:168: FAILED:
  CHECK( data.str_hello > "hellp" )
with expansion:
  "hello" > "hellp"

ConditionTests.cpp:169: FAILED:
  CHECK( data.str_hello > "z" )
with expansion:
  "hello" > "z"

ConditionTests.cpp:170: FAILED:
  CHECK( data.str_hello < "hellm" )
with expansion:
  "hello" < "hellm"

ConditionTests.cpp:171: FAILED:
  CHECK( data.str_hello < "a" )
with expansion:
  "hello" < "a"

ConditionTests.cpp:173: FAILED:
  CHECK( data.str_hello >= "z" )
with expansion:
  "hello" >= "z"

ConditionTests.cpp:174: FAILED:
  CHECK( data.str_hello <= "a" )
with expansion:
  "hello" <= "a"

-------------------------------------------------------------------------------
./succeeding/conditions/int literals
...............................................................................

ConditionTests.cpp:188:
PASSED:
  REQUIRE( i == 1 )
with expansion:
  1 == 1

ConditionTests.cpp:189:
PASSED:
  REQUIRE( ui == 2 )
with expansion:
  2 == 2

ConditionTests.cpp:190:
PASSED:
  REQUIRE( l == 3 )
with expansion:
  3 == 3

ConditionTests.cpp:191:
PASSED:
  REQUIRE( ul == 4 )
with expansion:
  4 == 4

ConditionTests.cpp:192:
PASSED:
  REQUIRE( c == 5 )
with expansion:
  5 == 5

ConditionTests.cpp:193:
PASSED:
  REQUIRE( uc == 6 )
with expansion:
  6 == 6

ConditionTests.cpp:195:
PASSED:
  REQUIRE( 1 == i )
with expansion:
  1 == 1

ConditionTests.cpp:196:
PASSED:
  REQUIRE( 2 == ui )
with expansion:
  2 == 2

ConditionTests.cpp:197:
PASSED:
  REQUIRE( 3 == l )
with expansion:
  3 == 3

ConditionTests.cpp:198:
PASSED:
  REQUIRE( 4 == ul )
with expansion:
  4 == 4

ConditionTests.cpp:199:
PASSED:
  REQUIRE( 5 == c )
with expansion:
  5 == 5

ConditionTests.cpp:200:
PASSED:
  REQUIRE( 6 == uc )
with expansion:
  6 == 6

ConditionTests.cpp:202:
PASSED:
  REQUIRE( (std::numeric_limits<unsigned long>::max)() > ul )
with expansion:
  0x<hex digits> > 4

-------------------------------------------------------------------------------
./succeeding/conditions//long_to_unsigned_x
...............................................................................

ConditionTests.cpp:223:
PASSED:
  REQUIRE( long_var == unsigned_char_var )
with expansion:
  1 == 1

ConditionTests.cpp:224:
PASSED:
  REQUIRE( long_var == unsigned_short_var )
with expansion:
  1 == 1

ConditionTests.cpp:225:
PASSED:
  REQUIRE( long_var == unsigned_int_var )
with expansion:
  1 == 1

ConditionTests.cpp:226:
PASSED:
  REQUIRE( long_var == unsigned_long_var )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
./succeeding/conditions/const ints to int literal
...............................................................................

ConditionTests.cpp:237:
PASSED:
  REQUIRE( unsigned_char_var == 1 )
with expansion:
  1 == 1

ConditionTests.cpp:238:
PASSED:
  REQUIRE( unsigned_short_var == 1 )
with expansion:
  1 == 1

ConditionTests.cpp:239:
PASSED:
  REQUIRE( unsigned_int_var == 1 )
with expansion:
  1 == 1

ConditionTests.cpp:240:
PASSED:
  REQUIRE( unsigned_long_var == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
./succeeding/conditions/negative ints
...............................................................................

ConditionTests.cpp:246:
PASSED:
  CHECK( ( -1 > 2u ) )
with expansion:
  true

ConditionTests.cpp:247:
PASSED:
  CHECK( -1 > 2u )
with expansion:
  -1 > 2

ConditionTests.cpp:249:
PASSED:
  CHECK( ( 2u < -1 ) )
with expansion:
  true

ConditionTests.cpp:250:
PASSED:
  CHECK( 2u < -1 )
with expansion:
  2 < -1

ConditionTests.cpp:253:
PASSED:
  CHECK( ( minInt > 2u ) )
with expansion:
  true

ConditionTests.cpp:254:
PASSED:
  CHECK( minInt > 2u )
with expansion:
  -2147483648 > 2

-------------------------------------------------------------------------------
./succeeding/conditions/computed ints
...............................................................................

ConditionTests.cpp:269:
PASSED:
  CHECK( 54 == 6*9 )
with expansion:
  54 == 54

-------------------------------------------------------------------------------
./succeeding/conditions/ptr
...............................................................................

ConditionTests.cpp:285:
PASSED:
  REQUIRE( p == __null )
with expansion:
  __null == 0

ConditionTests.cpp:286:
PASSED:
  REQUIRE( p == pNULL )
with expansion:
  __null == __null

ConditionTests.cpp:291:
PASSED:
  REQUIRE( p != __null )
with expansion:
  0x<hex digits> != 0

ConditionTests.cpp:294:
PASSED:
  REQUIRE( cp != __null )
with expansion:
  0x<hex digits> != 0

ConditionTests.cpp:297:
PASSED:
  REQUIRE( cpc != __null )
with expansion:
  0x<hex digits> != 0

ConditionTests.cpp:299:
PASSED:
  REQUIRE( returnsNull() == __null )
with expansion:
  {null string} == 0

ConditionTests.cpp:300:
PASSED:
  REQUIRE( returnsConstNull() == __null )
with expansion:
  {null string} == 0

ConditionTests.cpp:302:
PASSED:
  REQUIRE( __null != p )
with expansion:
  0 != 0x<hex digits>

-------------------------------------------------------------------------------
./succeeding/conditions/not
...............................................................................

ConditionTests.cpp:317:
PASSED:
  REQUIRE( false == false )

ConditionTests.cpp:318:
PASSED:
  REQUIRE( true == true )

ConditionTests.cpp:319:
PASSED:
  REQUIRE( !false )
with expansion:
  true

ConditionTests.cpp:320:
PASSED:
  REQUIRE_FALSE( !false )

ConditionTests.cpp:322:
PASSED:
  REQUIRE( !falseValue )
with expansion:
  true

ConditionTests.cpp:323:
PASSED:
  REQUIRE_FALSE( !falseValue )
with expansion:
  !false

ConditionTests.cpp:325:
PASSED:
  REQUIRE( !(1 == 2) )
with expansion:
  true

ConditionTests.cpp:326:
PASSED:
  REQUIRE_FALSE( !1 == 2 )
with expansion:
  !(1 == 2)

-------------------------------------------------------------------------------
./failing/conditions/not
...............................................................................

ConditionTests.cpp:334: FAILED:
  CHECK( false != false )

ConditionTests.cpp:335: FAILED:
  CHECK( true != true )

ConditionTests.cpp:336: FAILED:
  CHECK( !true )
with expansion:
  false

ConditionTests.cpp:337: FAILED:
  CHECK_FALSE( !true )

ConditionTests.cpp:339: FAILED:
  CHECK( !trueValue )
with expansion:
  false

ConditionTests.cpp:340: FAILED:
  CHECK_FALSE( !trueValue )
with expansion:
  !true

ConditionTests.cpp:342: FAILED:
  CHECK( !(1 == 1) )
with expansion:
  false

ConditionTests.cpp:343: FAILED:
  CHECK_FALSE( !1 == 1 )
with expansion:
  !(1 == 1)

-------------------------------------------------------------------------------
./succeeding/exceptions/explicit
...............................................................................

ExceptionTests.cpp:35:
PASSED:
  REQUIRE_THROWS_AS( thisThrows() )

ExceptionTests.cpp:36:
PASSED:
  REQUIRE_NOTHROW( thisDoesntThrow() )

ExceptionTests.cpp:37:
PASSED:
  REQUIRE_THROWS( thisThrows() )

-------------------------------------------------------------------------------
./failing/exceptions/explicit
...............................................................................

ExceptionTests.cpp:43: FAILED:
  CHECK_THROWS_AS( thisThrows() )
due to unexpected exception with message:
  expected exception

ExceptionTests.cpp:44: FAILED:
  CHECK_THROWS_AS( thisDoesntThrow() )
because no exception was thrown where one was expected:

ExceptionTests.cpp:45: FAILED:
  CHECK_NOTHROW( thisThrows() )
due to unexpected exception with message:
  expected exception

-------------------------------------------------------------------------------
./failing/exceptions/implicit
...............................................................................

ExceptionTests.cpp:48: FAILED:
due to unexpected exception with message:
  unexpected exception

-------------------------------------------------------------------------------
./failing/exceptions/implicit/2
...............................................................................

ExceptionTests.cpp:56:
PASSED:
  CHECK( 1 == 1 )

ExceptionTests.cpp:56: FAILED:
  {Unknown expression after the reported line}
due to unexpected exception with message:
  unexpected exception

-------------------------------------------------------------------------------
./failing/exceptions/implicit/3
  section name
...............................................................................

ExceptionTests.cpp:62: FAILED:
due to unexpected exception with message:
  unexpected exception

-------------------------------------------------------------------------------
./succeeding/exceptions/implicit
...............................................................................


No assertions in test case, './succeeding/exceptions/implicit'

-------------------------------------------------------------------------------
./failing/exceptions/custom
...............................................................................

ExceptionTests.cpp:106: FAILED:
due to unexpected exception with message:
  custom exception

-------------------------------------------------------------------------------
./failing/exceptions/custom/nothrow
...............................................................................

ExceptionTests.cpp:113: FAILED:
  REQUIRE_NOTHROW( throw CustomException( "unexpected custom exception" ) )
due to unexpected exception with message:
  unexpected custom exception

-------------------------------------------------------------------------------
./failing/exceptions/custom/throw
...............................................................................

ExceptionTests.cpp:118: FAILED:
  REQUIRE_THROWS_AS( throw CustomException( "custom exception - not std" ) )
due to unexpected exception with message:
  custom exception - not std

-------------------------------------------------------------------------------
./failing/exceptions/custom/double
...............................................................................

ExceptionTests.cpp:122: FAILED:
due to unexpected exception with message:
  3.14

-------------------------------------------------------------------------------
./succeeding/exceptions/notimplemented
...............................................................................

ExceptionTests.cpp:133:
PASSED:
  REQUIRE_THROWS( thisFunctionNotImplemented( 7 ) )

-------------------------------------------------------------------------------
./succeeding/generators/1
...............................................................................

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  2 == 2

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  200 == 200

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  4 == 4

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  200 == 200

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  6 == 6

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  200 == 200

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  8 == 8

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  200 == 200

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  10 == 10

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  200 == 200

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  30 == 30

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  200 == 200

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  40 == 40

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  200 == 200

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  42 == 42

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  200 == 200

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  72 == 72

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  200 == 200

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  2 == 2

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  202 == 202

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  4 == 4

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  202 == 202

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  6 == 6

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  202 == 202

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  8 == 8

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  202 == 202

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  10 == 10

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  202 == 202

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  30 == 30

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  202 == 202

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  40 == 40

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  202 == 202

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  42 == 42

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  202 == 202

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  72 == 72

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  202 == 202

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  2 == 2

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  204 == 204

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  4 == 4

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  204 == 204

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  6 == 6

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  204 == 204

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  8 == 8

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  204 == 204

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  10 == 10

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  204 == 204

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  30 == 30

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  204 == 204

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  40 == 40

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  204 == 204

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  42 == 42

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  204 == 204

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  72 == 72

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  204 == 204

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  2 == 2

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  206 == 206

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  4 == 4

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  206 == 206

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  6 == 6

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  206 == 206

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  8 == 8

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  206 == 206

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  10 == 10

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  206 == 206

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  30 == 30

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  206 == 206

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  40 == 40

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  206 == 206

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  42 == 42

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  206 == 206

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  72 == 72

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  206 == 206

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  2 == 2

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  208 == 208

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  4 == 4

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  208 == 208

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  6 == 6

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  208 == 208

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  8 == 8

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  208 == 208

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  10 == 10

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  208 == 208

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  30 == 30

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  208 == 208

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  40 == 40

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  208 == 208

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  42 == 42

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  208 == 208

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  72 == 72

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  208 == 208

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  2 == 2

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  210 == 210

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  4 == 4

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  210 == 210

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  6 == 6

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  210 == 210

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  8 == 8

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  210 == 210

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  10 == 10

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  210 == 210

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  30 == 30

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  210 == 210

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  40 == 40

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  210 == 210

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  42 == 42

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  210 == 210

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  72 == 72

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  210 == 210

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  2 == 2

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  212 == 212

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  4 == 4

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  212 == 212

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  6 == 6

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  212 == 212

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  8 == 8

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  212 == 212

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  10 == 10

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  212 == 212

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  30 == 30

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  212 == 212

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  40 == 40

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  212 == 212

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  42 == 42

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  212 == 212

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  72 == 72

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  212 == 212

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  2 == 2

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  214 == 214

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  4 == 4

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  214 == 214

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  6 == 6

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  214 == 214

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  8 == 8

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  214 == 214

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  10 == 10

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  214 == 214

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  30 == 30

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  214 == 214

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  40 == 40

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  214 == 214

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  42 == 42

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  214 == 214

GeneratorTests.cpp:26:
PASSED:
  CATCH_REQUIRE( multiply( i, 2 ) == i*2 )
with expansion:
  72 == 72

GeneratorTests.cpp:27:
PASSED:
  CATCH_REQUIRE( multiply( j, 2 ) == j*2 )
with expansion:
  214 == 214

-------------------------------------------------------------------------------
./succeeding/generators/2
...............................................................................

GeneratorTests.cpp:40:
PASSED:
  CATCH_REQUIRE( i->first == i->second-1 )
with expansion:
  0 == 0

GeneratorTests.cpp:40:
PASSED:
  CATCH_REQUIRE( i->first == i->second-1 )
with expansion:
  2 == 2

-------------------------------------------------------------------------------
./succeeding/message
...............................................................................

MessageTests.cpp:14:
warning:
  this is a message
  this is a warning


No assertions in test case, './succeeding/message'

-------------------------------------------------------------------------------
./succeeding/succeed
...............................................................................

MessageTests.cpp:18:
PASSED:
with message:
  this is a success

-------------------------------------------------------------------------------
./failing/message/info/1
...............................................................................

MessageTests.cpp:26: FAILED:
  REQUIRE( a == 1 )
with expansion:
  2 == 1
with messages:
  this message should be logged
  so should this

-------------------------------------------------------------------------------
./mixed/message/info/2
...............................................................................

MessageTests.cpp:33:
PASSED:
  CHECK( a == 2 )
with expansion:
  2 == 2
with message:
  this message should not be logged

MessageTests.cpp:37: FAILED:
  CHECK( a == 1 )
with expansion:
  2 == 1
with message:
  this message should be logged

MessageTests.cpp:41: FAILED:
  CHECK( a == 0 )
with expansion:
  2 == 0
with message:
  and this, but later

MessageTests.cpp:45:
PASSED:
  CHECK( a == 2 )
with expansion:
  2 == 2
with message:
  but not this

-------------------------------------------------------------------------------
./failing/message/fail
...............................................................................

MessageTests.cpp:51: FAILED:
explicitly with message:
  This is a failure

-------------------------------------------------------------------------------
./failing/message/sections
  one
...............................................................................

MessageTests.cpp:58: FAILED:
explicitly with message:
  Message from section one

-------------------------------------------------------------------------------
./failing/message/sections
  two
...............................................................................

MessageTests.cpp:63: FAILED:
explicitly with message:
  Message from section two

Message from section one
-------------------------------------------------------------------------------
./succeeding/message/sections/stdout
  one
...............................................................................


No assertions in section, 'one'

Message from section two
-------------------------------------------------------------------------------
./succeeding/message/sections/stdout
  two
...............................................................................


No assertions in section, 'two'

-------------------------------------------------------------------------------
./mixed/message/scoped
...............................................................................

MessageTests.cpp:86:
PASSED:
  REQUIRE( i < 10 )
with expansion:
  0 < 10
with messages:
  current counter 0
  i := 0

MessageTests.cpp:86:
PASSED:
  REQUIRE( i < 10 )
with expansion:
  1 < 10
with messages:
  current counter 1
  i := 1

MessageTests.cpp:86:
PASSED:
  REQUIRE( i < 10 )
with expansion:
  2 < 10
with messages:
  current counter 2
  i := 2

MessageTests.cpp:86:
PASSED:
  REQUIRE( i < 10 )
with expansion:
  3 < 10
with messages:
  current counter 3
  i := 3

MessageTests.cpp:86:
PASSED:
  REQUIRE( i < 10 )
with expansion:
  4 < 10
with messages:
  current counter 4
  i := 4

MessageTests.cpp:86:
PASSED:
  REQUIRE( i < 10 )
with expansion:
  5 < 10
with messages:
  current counter 5
  i := 5

MessageTests.cpp:86:
PASSED:
  REQUIRE( i < 10 )
with expansion:
  6 < 10
with messages:
  current counter 6
  i := 6

MessageTests.cpp:86:
PASSED:
  REQUIRE( i < 10 )
with expansion:
  7 < 10
with messages:
  current counter 7
  i := 7

MessageTests.cpp:86:
PASSED:
  REQUIRE( i < 10 )
with expansion:
  8 < 10
with messages:
  current counter 8
  i := 8

MessageTests.cpp:86:
PASSED:
  REQUIRE( i < 10 )
with expansion:
  9 < 10
with messages:
  current counter 9
  i := 9

MessageTests.cpp:86: FAILED:
  REQUIRE( i < 10 )
with expansion:
  10 < 10
with messages:
  current counter 10
  i := 10

-------------------------------------------------------------------------------
./succeeding/nofail
...............................................................................

MessageTests.cpp:92:
FAILED - but was ok:
  CHECK_NOFAIL( 1 == 2 )


No assertions in test case, './succeeding/nofail'

-------------------------------------------------------------------------------
just info
...............................................................................


No assertions in test case, 'just info'

-------------------------------------------------------------------------------
just failure
...............................................................................

MessageTests.cpp:101: FAILED:
explicitly with message:
  Previous info should not be seen

-------------------------------------------------------------------------------
./succeeding/Misc/Sections
  s1
...............................................................................

MiscTests.cpp:21:
PASSED:
  REQUIRE( a != b )
with expansion:
  1 != 2

MiscTests.cpp:22:
PASSED:
  REQUIRE( b != a )
with expansion:
  2 != 1

-------------------------------------------------------------------------------
./succeeding/Misc/Sections
  s2
...............................................................................

MiscTests.cpp:27:
PASSED:
  REQUIRE( a != b )
with expansion:
  1 != 2

-------------------------------------------------------------------------------
./succeeding/Misc/Sections/nested
  s1
...............................................................................

MiscTests.cpp:38:
PASSED:
  REQUIRE( a != b )
with expansion:
  1 != 2

MiscTests.cpp:39:
PASSED:
  REQUIRE( b != a )
with expansion:
  2 != 1

-------------------------------------------------------------------------------
./succeeding/Misc/Sections/nested
  s1
  s2
...............................................................................

MiscTests.cpp:43:
PASSED:
  REQUIRE( a != b )
with expansion:
  1 != 2

-------------------------------------------------------------------------------
./mixed/Misc/Sections/nested2
  s1
  s2
...............................................................................

MiscTests.cpp:57: FAILED:
  REQUIRE( a == b )
with expansion:
  1 == 2

-------------------------------------------------------------------------------
./mixed/Misc/Sections/nested2
  s1
  s3
...............................................................................

MiscTests.cpp:62:
PASSED:
  REQUIRE( a != b )
with expansion:
  1 != 2

-------------------------------------------------------------------------------
./mixed/Misc/Sections/nested2
  s1
  s4
...............................................................................

MiscTests.cpp:66:
PASSED:
  REQUIRE( a < b )
with expansion:
  1 < 2

-------------------------------------------------------------------------------
./Sections/nested/a/b
  c
  d (leaf)
...............................................................................


No assertions in section, 'd (leaf)'

-------------------------------------------------------------------------------
./Sections/nested/a/b
  c
  e (leaf)
...............................................................................


No assertions in section, 'e (leaf)'

-------------------------------------------------------------------------------
./Sections/nested/a/b
  f (leaf)
...............................................................................


No assertions in section, 'f (leaf)'

-------------------------------------------------------------------------------
./mixed/Misc/Sections/loops
  s1
...............................................................................

MiscTests.cpp:99: FAILED:
  CHECK( b > a )
with expansion:
  0 > 1

-------------------------------------------------------------------------------
./mixed/Misc/loops
...............................................................................

MiscTests.cpp:111: FAILED:
  CHECK( ( fib[i] % 2 ) == 0 )
with expansion:
  1 == 0
with message:
  Testing if fib[0] (1) is even

MiscTests.cpp:111: FAILED:
  CHECK( ( fib[i] % 2 ) == 0 )
with expansion:
  1 == 0
with message:
  Testing if fib[1] (1) is even

MiscTests.cpp:111:
PASSED:
  CHECK( ( fib[i] % 2 ) == 0 )
with expansion:
  0 == 0
with message:
  Testing if fib[2] (2) is even

MiscTests.cpp:111: FAILED:
  CHECK( ( fib[i] % 2 ) == 0 )
with expansion:
  1 == 0
with message:
  Testing if fib[3] (3) is even

MiscTests.cpp:111: FAILED:
  CHECK( ( fib[i] % 2 ) == 0 )
with expansion:
  1 == 0
with message:
  Testing if fib[4] (5) is even

MiscTests.cpp:111:
PASSED:
  CHECK( ( fib[i] % 2 ) == 0 )
with expansion:
  0 == 0
with message:
  Testing if fib[5] (8) is even

MiscTests.cpp:111: FAILED:
  CHECK( ( fib[i] % 2 ) == 0 )
with expansion:
  1 == 0
with message:
  Testing if fib[6] (13) is even

MiscTests.cpp:111: FAILED:
  CHECK( ( fib[i] % 2 ) == 0 )
with expansion:
  1 == 0
with message:
  Testing if fib[7] (21) is even

Some information
An error
-------------------------------------------------------------------------------
./succeeding/Misc/stdout,stderr
...............................................................................


No assertions in test case, './succeeding/Misc/stdout,stderr'

-------------------------------------------------------------------------------
./succeeding/Misc/null strings
...............................................................................

MiscTests.cpp:129:
PASSED:
  REQUIRE( makeString( false ) != static_cast<char*>(__null) )
with expansion:
  "valid string" != {null string}

MiscTests.cpp:130:
PASSED:
  REQUIRE( makeString( true ) == static_cast<char*>(__null) )
with expansion:
  {null string} == {null string}

-------------------------------------------------------------------------------
./failing/info
...............................................................................

MiscTests.cpp:138: FAILED:
  REQUIRE( false )
with messages:
  hi
  i := 7

-------------------------------------------------------------------------------
./succeeding/checkedif
...............................................................................

MiscTests.cpp:143:
PASSED:
  CHECKED_IF( flag )
with expansion:
  true

MiscTests.cpp:151:
PASSED:
  REQUIRE( testCheckedIf( true ) )
with expansion:
  true

-------------------------------------------------------------------------------
./failing/checkedif
...............................................................................

MiscTests.cpp:143: FAILED:
  CHECKED_IF( flag )
with expansion:
  false

MiscTests.cpp:156: FAILED:
  REQUIRE( testCheckedIf( false ) )
with expansion:
  false

-------------------------------------------------------------------------------
./succeeding/checkedelse
...............................................................................

MiscTests.cpp:161:
PASSED:
  CHECKED_ELSE( flag )
with expansion:
  true

MiscTests.cpp:169:
PASSED:
  REQUIRE( testCheckedElse( true ) )
with expansion:
  true

-------------------------------------------------------------------------------
./failing/checkedelse
...............................................................................

MiscTests.cpp:161: FAILED:
  CHECKED_ELSE( flag )
with expansion:
  false

MiscTests.cpp:174: FAILED:
  REQUIRE( testCheckedElse( false ) )
with expansion:
  false

-------------------------------------------------------------------------------
./misc/xmlentitycheck
  embedded xml
...............................................................................


No assertions in section, 'embedded xml'

-------------------------------------------------------------------------------
./misc/xmlentitycheck
  encoded chars
...............................................................................


No assertions in section, 'encoded chars'

-------------------------------------------------------------------------------
./manual/onechar
...............................................................................

MiscTests.cpp:192: FAILED:
  REQUIRE( false )
with message:
  3

-------------------------------------------------------------------------------
./succeeding/atomic if
...............................................................................

MiscTests.cpp:202:
PASSED:
  REQUIRE( x == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
./succeeding/matchers
...............................................................................

MiscTests.cpp:212:
PASSED:
  REQUIRE_THAT( testStringForMatching() Contains( "string" ) )
with expansion:
  "this string contains 'abc' as a substring" contains: "string"

MiscTests.cpp:213:
PASSED:
  CHECK_THAT( testStringForMatching() Contains( "abc" ) )
with expansion:
  "this string contains 'abc' as a substring" contains: "abc"

MiscTests.cpp:215:
PASSED:
  CHECK_THAT( testStringForMatching() StartsWith( "this" ) )
with expansion:
  "this string contains 'abc' as a substring" starts with: "this"

MiscTests.cpp:216:
PASSED:
  CHECK_THAT( testStringForMatching() EndsWith( "substring" ) )
with expansion:
  "this string contains 'abc' as a substring" ends with: "substring"

-------------------------------------------------------------------------------
./failing/matchers/Contains
...............................................................................

MiscTests.cpp:221: FAILED:
  CHECK_THAT( testStringForMatching() Contains( "not there" ) )
with expansion:
  "this string contains 'abc' as a substring" contains: "not there"

-------------------------------------------------------------------------------
./failing/matchers/StartsWith
...............................................................................

MiscTests.cpp:226: FAILED:
  CHECK_THAT( testStringForMatching() StartsWith( "string" ) )
with expansion:
  "this string contains 'abc' as a substring" starts with: "string"

-------------------------------------------------------------------------------
./failing/matchers/EndsWith
...............................................................................

MiscTests.cpp:231: FAILED:
  CHECK_THAT( testStringForMatching() EndsWith( "this" ) )
with expansion:
  "this string contains 'abc' as a substring" ends with: "this"

-------------------------------------------------------------------------------
./failing/matchers/Equals
...............................................................................

MiscTests.cpp:236: FAILED:
  CHECK_THAT( testStringForMatching() Equals( "something else" ) )
with expansion:
  "this string contains 'abc' as a substring" equals: "something else"

-------------------------------------------------------------------------------
./succeeding/matchers/AllOf
...............................................................................

MiscTests.cpp:244:
PASSED:
  CHECK_THAT( testStringForMatching() AllOf( Catch::Contains( "string" ), Catch::Contains( "abc" ) ) )
with expansion:
  "this string contains 'abc' as a substring" ( contains: "string" and
  contains: "abc" )

-------------------------------------------------------------------------------
./succeeding/matchers/AnyOf
...............................................................................

MiscTests.cpp:248:
PASSED:
  CHECK_THAT( testStringForMatching() AnyOf( Catch::Contains( "string" ), Catch::Contains( "not there" ) ) )
with expansion:
  "this string contains 'abc' as a substring" ( contains: "string" or
  contains: "not there" )

MiscTests.cpp:249:
PASSED:
  CHECK_THAT( testStringForMatching() AnyOf( Catch::Contains( "not there" ), Catch::Contains( "string" ) ) )
with expansion:
  "this string contains 'abc' as a substring" ( contains: "not there" or
  contains: "string" )

-------------------------------------------------------------------------------
./succeeding/matchers/Equals
...............................................................................

MiscTests.cpp:254:
PASSED:
  CHECK_THAT( testStringForMatching() Equals( "this string contains 'abc' as a substring" ) )
with expansion:
  "this string contains 'abc' as a substring" equals: "this string contains
  'abc' as a substring"

-------------------------------------------------------------------------------
example/factorial
...............................................................................

MiscTests.cpp:265:
PASSED:
  REQUIRE( Factorial(0) == 1 )
with expansion:
  1 == 1

MiscTests.cpp:266:
PASSED:
  REQUIRE( Factorial(1) == 1 )
with expansion:
  1 == 1

MiscTests.cpp:267:
PASSED:
  REQUIRE( Factorial(2) == 2 )
with expansion:
  2 == 2

MiscTests.cpp:268:
PASSED:
  REQUIRE( Factorial(3) == 6 )
with expansion:
  6 == 6

MiscTests.cpp:269:
PASSED:
  REQUIRE( Factorial(10) == 3628800 )
with expansion:
  0x<hex digits> == 3628800

-------------------------------------------------------------------------------
empty
...............................................................................


No assertions in test case, 'empty'

-------------------------------------------------------------------------------
Nice descriptive name
...............................................................................

MiscTests.cpp:278:
warning:
  This one ran


No assertions in test case, 'Nice descriptive name'

-------------------------------------------------------------------------------
first tag
...............................................................................


No assertions in test case, 'first tag'

-------------------------------------------------------------------------------
second tag
...............................................................................


No assertions in test case, 'second tag'

-------------------------------------------------------------------------------
selftest/main
  selftest/expected result
  selftest/expected result/failing tests
...............................................................................

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

catch_self_test.hpp:120:
PASSED:
with message:
  Tests failed, as expected

-------------------------------------------------------------------------------
selftest/main
  selftest/expected result
  selftest/expected result/succeeding tests
...............................................................................

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

Message from section one
Message from section two
catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

Some information
An error
catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

catch_self_test.hpp:109:
PASSED:
with message:
  Tests passed, as expected

Message from section one
Message from section two
Some information
An error
-------------------------------------------------------------------------------
selftest/main
  selftest/test counts
  selftest/test counts/succeeding tests
...............................................................................

TestMain.cpp:40:
PASSED:
  CHECK( totals.assertions.passed == 296 )
with expansion:
  296 == 296

TestMain.cpp:41:
PASSED:
  CHECK( totals.assertions.failed == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
selftest/main
  selftest/test counts
  selftest/test counts/failing tests
...............................................................................

TestMain.cpp:47:
PASSED:
  CHECK( totals.assertions.passed == 1 )
with expansion:
  1 == 1

TestMain.cpp:48:
PASSED:
  CHECK( totals.assertions.failed == 73 )
with expansion:
  73 == 73

-------------------------------------------------------------------------------
meta/Misc/Sections
...............................................................................

TestMain.cpp:57:
PASSED:
  CHECK( totals.assertions.passed == 2 )
with expansion:
  2 == 2

TestMain.cpp:58:
PASSED:
  CHECK( totals.assertions.failed == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
selftest/parser/2
  default
...............................................................................

TestMain.cpp:97:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:99:
PASSED:
  CHECK( config.shouldDebugBreak == false )
with expansion:
  false == false

TestMain.cpp:100:
PASSED:
  CHECK( config.cutoff == -1 )
with expansion:
  -1 == -1

TestMain.cpp:101:
PASSED:
  CHECK( config.allowThrows == true )
with expansion:
  true == true

TestMain.cpp:102:
PASSED:
  CHECK( config.reporter.empty() )
with expansion:
  true

-------------------------------------------------------------------------------
selftest/parser/2
  test lists
  -t/1
...............................................................................

TestMain.cpp:108:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:110:
PASSED:
  REQUIRE( config.filters.size() == 1 )
with expansion:
  1 == 1

TestMain.cpp:111:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "notIncluded" ) ) == false )
with expansion:
  false == false

TestMain.cpp:112:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) )
with expansion:
  true

-------------------------------------------------------------------------------
selftest/parser/2
  test lists
  -t/exclude:1
...............................................................................

TestMain.cpp:116:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:118:
PASSED:
  REQUIRE( config.filters.size() == 1 )
with expansion:
  1 == 1

TestMain.cpp:119:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) == false )
with expansion:
  false == false

TestMain.cpp:120:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "alwaysIncluded" ) ) )
with expansion:
  true

-------------------------------------------------------------------------------
selftest/parser/2
  test lists
  --test/1
...............................................................................

TestMain.cpp:125:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:127:
PASSED:
  REQUIRE( config.filters.size() == 1 )
with expansion:
  1 == 1

TestMain.cpp:128:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "notIncluded" ) ) == false )
with expansion:
  false == false

TestMain.cpp:129:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) )
with expansion:
  true

-------------------------------------------------------------------------------
selftest/parser/2
  test lists
  --test/exclude:1
...............................................................................

TestMain.cpp:134:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:136:
PASSED:
  REQUIRE( config.filters.size() == 1 )
with expansion:
  1 == 1

TestMain.cpp:137:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) == false )
with expansion:
  false == false

TestMain.cpp:138:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "alwaysIncluded" ) ) )
with expansion:
  true

-------------------------------------------------------------------------------
selftest/parser/2
  test lists
  --test/exclude:2
...............................................................................

TestMain.cpp:143:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:145:
PASSED:
  REQUIRE( config.filters.size() == 1 )
with expansion:
  1 == 1

TestMain.cpp:146:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) == false )
with expansion:
  false == false

TestMain.cpp:147:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "alwaysIncluded" ) ) )
with expansion:
  true

-------------------------------------------------------------------------------
selftest/parser/2
  test lists
  -t/2
...............................................................................

TestMain.cpp:152:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:154:
PASSED:
  REQUIRE( config.filters.size() == 1 )
with expansion:
  1 == 1

TestMain.cpp:155:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "notIncluded" ) ) == false )
with expansion:
  false == false

TestMain.cpp:156:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) )
with expansion:
  true

TestMain.cpp:157:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "test2" ) ) )
with expansion:
  true

-------------------------------------------------------------------------------
selftest/parser/2
  test lists
  -t/0
...............................................................................

TestMain.cpp:162:
PASSED:
  REQUIRE_THAT( parseIntoConfigAndReturnError( argv, config ) Contains( "at least 1" ) )
with expansion:
  "Error while parsing arguments. Expected at least 1 argument." contains: "at
  least 1"

-------------------------------------------------------------------------------
selftest/parser/2
  reporter
  -r/console
...............................................................................

TestMain.cpp:169:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:171:
PASSED:
  REQUIRE( config.reporter == "console" )
with expansion:
  "console" == "console"

-------------------------------------------------------------------------------
selftest/parser/2
  reporter
  -r/xml
...............................................................................

TestMain.cpp:175:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:177:
PASSED:
  REQUIRE( config.reporter == "xml" )
with expansion:
  "xml" == "xml"

-------------------------------------------------------------------------------
selftest/parser/2
  reporter
  --reporter/junit
...............................................................................

TestMain.cpp:181:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:183:
PASSED:
  REQUIRE( config.reporter == "junit" )
with expansion:
  "junit" == "junit"

-------------------------------------------------------------------------------
selftest/parser/2
  reporter
  -r/error
...............................................................................

TestMain.cpp:187:
PASSED:
  REQUIRE_THAT( parseIntoConfigAndReturnError( argv, config ) Contains( "1 argument" ) )
with expansion:
  "Error while parsing arguments. Expected 1 argument. Arguments were: one
  two" contains: "1 argument"

-------------------------------------------------------------------------------
selftest/parser/2
  debugger
  -b
...............................................................................

TestMain.cpp:194:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:196:
PASSED:
  REQUIRE( config.shouldDebugBreak == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
selftest/parser/2
  debugger
  --break
...............................................................................

TestMain.cpp:200:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:202:
PASSED:
  REQUIRE( config.shouldDebugBreak )
with expansion:
  true

-------------------------------------------------------------------------------
selftest/parser/2
  debugger
  -b
...............................................................................

TestMain.cpp:206:
PASSED:
  REQUIRE_THAT( parseIntoConfigAndReturnError( argv, config ) Contains( "0 arguments" ) )
with expansion:
  "Error while parsing arguments. Expected 0 arguments. Arguments were:
  unexpected" contains: "0 arguments"

-------------------------------------------------------------------------------
selftest/parser/2
  abort
  -a
...............................................................................

TestMain.cpp:213:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:215:
PASSED:
  REQUIRE( config.cutoff == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
selftest/parser/2
  abort
  -a/2
...............................................................................

TestMain.cpp:219:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:221:
PASSED:
  REQUIRE( config.cutoff == 2 )
with expansion:
  2 == 2

-------------------------------------------------------------------------------
selftest/parser/2
  abort
  -a/error/0
...............................................................................

TestMain.cpp:225:
PASSED:
  REQUIRE_THAT( parseIntoConfigAndReturnError( argv, config ) Contains( "greater than zero" ) )
with expansion:
  "Error while parsing arguments. threshold must be a number greater than
  zero. Arguments were: 0" contains: "greater than zero"

-------------------------------------------------------------------------------
selftest/parser/2
  abort
  -a/error/non numeric
...............................................................................

TestMain.cpp:229:
PASSED:
  REQUIRE_THAT( parseIntoConfigAndReturnError( argv, config ) Contains( "greater than zero" ) )
with expansion:
  "Error while parsing arguments. threshold must be a number greater than
  zero. Arguments were: oops" contains: "greater than zero"

-------------------------------------------------------------------------------
selftest/parser/2
  abort
  -a/error/two args
...............................................................................

TestMain.cpp:233:
PASSED:
  REQUIRE_THAT( parseIntoConfigAndReturnError( argv, config ) Contains( "0 and 1 argument" ) )
with expansion:
  "Error while parsing arguments. Expected between 0 and 1 argument. Arguments
  were: 1 2" contains: "0 and 1 argument"

-------------------------------------------------------------------------------
selftest/parser/2
  nothrow
  -nt
...............................................................................

TestMain.cpp:240:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:242:
PASSED:
  REQUIRE( config.allowThrows == false )
with expansion:
  false == false

-------------------------------------------------------------------------------
selftest/parser/2
  nothrow
  --nothrow
...............................................................................

TestMain.cpp:246:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:248:
PASSED:
  REQUIRE( config.allowThrows == false )
with expansion:
  false == false

-------------------------------------------------------------------------------
selftest/parser/2
  streams
  -o filename
...............................................................................

TestMain.cpp:255:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:257:
PASSED:
  REQUIRE( config.outputFilename == "filename.ext" )
with expansion:
  "filename.ext" == "filename.ext"

TestMain.cpp:258:
PASSED:
  REQUIRE( config.stream.empty() )
with expansion:
  true

-------------------------------------------------------------------------------
selftest/parser/2
  streams
  -o %stdout
...............................................................................

TestMain.cpp:262:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:264:
PASSED:
  REQUIRE( config.stream == "stdout" )
with expansion:
  "stdout" == "stdout"

TestMain.cpp:265:
PASSED:
  REQUIRE( config.outputFilename.empty() )
with expansion:
  true

-------------------------------------------------------------------------------
selftest/parser/2
  streams
  --out
...............................................................................

TestMain.cpp:269:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:271:
PASSED:
  REQUIRE( config.outputFilename == "filename.ext" )
with expansion:
  "filename.ext" == "filename.ext"

-------------------------------------------------------------------------------
selftest/parser/2
  combinations
  -a -b
...............................................................................

TestMain.cpp:278:
PASSED:
  CHECK_NOTHROW( parseIntoConfig( argv, config ) )

TestMain.cpp:280:
PASSED:
  CHECK( config.cutoff == 1 )
with expansion:
  1 == 1

TestMain.cpp:281:
PASSED:
  CHECK( config.shouldDebugBreak )
with expansion:
  true

TestMain.cpp:282:
PASSED:
  CHECK( config.allowThrows == false )
with expansion:
  false == false

-------------------------------------------------------------------------------
selftest/test filter
...............................................................................

TestMain.cpp:291:
PASSED:
  CHECK( matchAny.shouldInclude( fakeTestCase( "any" ) ) )
with expansion:
  true

TestMain.cpp:292:
PASSED:
  CHECK( matchNone.shouldInclude( fakeTestCase( "any" ) ) == false )
with expansion:
  false == false

TestMain.cpp:297:
PASSED:
  CHECK( matchHidden.shouldInclude( fakeTestCase( "any" ) ) == false )
with expansion:
  false == false

TestMain.cpp:298:
PASSED:
  CHECK( matchNonHidden.shouldInclude( fakeTestCase( "any" ) ) )
with expansion:
  true

TestMain.cpp:300:
PASSED:
  CHECK( matchHidden.shouldInclude( fakeTestCase( "./any" ) ) )
with expansion:
  true

TestMain.cpp:301:
PASSED:
  CHECK( matchNonHidden.shouldInclude( fakeTestCase( "./any" ) ) == false )
with expansion:
  false == false

-------------------------------------------------------------------------------
selftest/test filters
...............................................................................

TestMain.cpp:312:
PASSED:
  CHECK( matchHidden.shouldInclude( fakeTestCase( "./something" ) ) )
with expansion:
  true

TestMain.cpp:314:
PASSED:
  CHECK( filters.shouldInclude( fakeTestCase( "any" ) ) == false )
with expansion:
  false == false

TestMain.cpp:315:
PASSED:
  CHECK( filters.shouldInclude( fakeTestCase( "./something" ) ) )
with expansion:
  true

TestMain.cpp:316:
PASSED:
  CHECK( filters.shouldInclude( fakeTestCase( "./anything" ) ) == false )
with expansion:
  false == false

-------------------------------------------------------------------------------
selftest/filter/prefix wildcard
...............................................................................

TestMain.cpp:322:
PASSED:
  CHECK( matchBadgers.shouldInclude( fakeTestCase( "big badger" ) ) )
with expansion:
  true

TestMain.cpp:323:
PASSED:
  CHECK( matchBadgers.shouldInclude( fakeTestCase( "little badgers" ) ) == false )
with expansion:
  false == false

-------------------------------------------------------------------------------
selftest/filter/wildcard at both ends
...............................................................................

TestMain.cpp:328:
PASSED:
  CHECK( matchBadgers.shouldInclude( fakeTestCase( "big badger" ) ) )
with expansion:
  true

TestMain.cpp:329:
PASSED:
  CHECK( matchBadgers.shouldInclude( fakeTestCase( "little badgers" ) ) )
with expansion:
  true

TestMain.cpp:330:
PASSED:
  CHECK( matchBadgers.shouldInclude( fakeTestCase( "badgers are big" ) ) )
with expansion:
  true

TestMain.cpp:331:
PASSED:
  CHECK( matchBadgers.shouldInclude( fakeTestCase( "hedgehogs" ) ) == false )
with expansion:
  false == false

-------------------------------------------------------------------------------
selftest/option parsers
...............................................................................

TestMain.cpp:351:
PASSED:
  CHECK_NOTHROW( opt.parseIntoConfig( parser, config ) )

TestMain.cpp:353:
PASSED:
  REQUIRE( config.filters.size() == 1 )
with expansion:
  1 == 1

TestMain.cpp:354:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "notIncluded" ) ) == false )
with expansion:
  false == false

TestMain.cpp:355:
PASSED:
  REQUIRE( config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) )
with expansion:
  true

-------------------------------------------------------------------------------
selftest/tags
  one tag
...............................................................................

TestMain.cpp:369:
PASSED:
  CHECK( oneTag.getTestCaseInfo().description == "" )
with expansion:
  "" == ""

TestMain.cpp:370:
PASSED:
  CHECK( oneTag.hasTag( "one" ) )
with expansion:
  true

TestMain.cpp:371:
PASSED:
  CHECK( oneTag.getTags().size() == 1 )
with expansion:
  1 == 1

TestMain.cpp:373:
PASSED:
  CHECK( oneTag.matchesTags( p1 ) == true )
with expansion:
  true == true

TestMain.cpp:374:
PASSED:
  CHECK( oneTag.matchesTags( p2 ) == true )
with expansion:
  true == true

TestMain.cpp:375:
PASSED:
  CHECK( oneTag.matchesTags( p3 ) == false )
with expansion:
  false == false

TestMain.cpp:376:
PASSED:
  CHECK( oneTag.matchesTags( p4 ) == false )
with expansion:
  false == false

TestMain.cpp:377:
PASSED:
  CHECK( oneTag.matchesTags( p5 ) == false )
with expansion:
  false == false

-------------------------------------------------------------------------------
selftest/tags
  two tags
...............................................................................

TestMain.cpp:383:
PASSED:
  CHECK( twoTags.getTestCaseInfo().description == "" )
with expansion:
  "" == ""

TestMain.cpp:384:
PASSED:
  CHECK( twoTags.hasTag( "one" ) )
with expansion:
  true

TestMain.cpp:385:
PASSED:
  CHECK( twoTags.hasTag( "two" ) )
with expansion:
  true

TestMain.cpp:386:
PASSED:
  CHECK( twoTags.hasTag( "three" ) == false )
with expansion:
  false == false

TestMain.cpp:387:
PASSED:
  CHECK( twoTags.getTags().size() == 2 )
with expansion:
  2 == 2

TestMain.cpp:389:
PASSED:
  CHECK( twoTags.matchesTags( p1 ) == true )
with expansion:
  true == true

TestMain.cpp:390:
PASSED:
  CHECK( twoTags.matchesTags( p2 ) == true )
with expansion:
  true == true

TestMain.cpp:391:
PASSED:
  CHECK( twoTags.matchesTags( p3 ) == true )
with expansion:
  true == true

TestMain.cpp:392:
PASSED:
  CHECK( twoTags.matchesTags( p4 ) == true )
with expansion:
  true == true

TestMain.cpp:393:
PASSED:
  CHECK( twoTags.matchesTags( p5 ) == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
selftest/tags
  one tag with characters either side
...............................................................................

TestMain.cpp:399:
PASSED:
  CHECK( oneTagWithExtras.getTestCaseInfo().description == "1234" )
with expansion:
  "1234" == "1234"

TestMain.cpp:400:
PASSED:
  CHECK( oneTagWithExtras.hasTag( "one" ) )
with expansion:
  true

TestMain.cpp:401:
PASSED:
  CHECK( oneTagWithExtras.hasTag( "two" ) == false )
with expansion:
  false == false

TestMain.cpp:402:
PASSED:
  CHECK( oneTagWithExtras.getTags().size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
selftest/tags
  start of a tag, but not closed
...............................................................................

TestMain.cpp:409:
PASSED:
  CHECK( oneTagOpen.getTestCaseInfo().description == "[one" )
with expansion:
  "[one" == "[one"

TestMain.cpp:410:
PASSED:
  CHECK( oneTagOpen.hasTag( "one" ) == false )
with expansion:
  false == false

TestMain.cpp:411:
PASSED:
  CHECK( oneTagOpen.getTags().size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
selftest/tags
  hidden
...............................................................................

TestMain.cpp:417:
PASSED:
  CHECK( oneTag.getTestCaseInfo().description == "" )
with expansion:
  "" == ""

TestMain.cpp:418:
PASSED:
  CHECK( oneTag.hasTag( "hide" ) )
with expansion:
  true

TestMain.cpp:419:
PASSED:
  CHECK( oneTag.isHidden() )
with expansion:
  true

TestMain.cpp:421:
PASSED:
  CHECK( oneTag.matchesTags( "~[hide]" ) == false )
with expansion:
  false == false

-------------------------------------------------------------------------------
./succeeding/Tricky/std::pair
...............................................................................

TrickyTests.cpp:37:
PASSED:
  REQUIRE( (std::pair<int, int>( 1, 2 )) == aNicePair )
with expansion:
  std::pair( 1, 2 ) == std::pair( 1, 2 )

-------------------------------------------------------------------------------
./inprogress/failing/Tricky/trailing expression
...............................................................................

TrickyTests.cpp:55:
warning:
  Uncomment the code in this test to check that it gives a sensible compiler
  error


No assertions in test case, './inprogress/failing/Tricky/trailing expression'

-------------------------------------------------------------------------------
./inprogress/failing/Tricky/compound lhs
...............................................................................

TrickyTests.cpp:71:
warning:
  Uncomment the code in this test to check that it gives a sensible compiler
  error


No assertions in test case, './inprogress/failing/Tricky/compound lhs'

-------------------------------------------------------------------------------
./failing/Tricky/non streamable type
...............................................................................

TrickyTests.cpp:95: FAILED:
  CHECK( &o1 == &o2 )
with expansion:
  0x<hex digits> == 0x<hex digits>

TrickyTests.cpp:96: FAILED:
  CHECK( o1 == o2 )
with expansion:
  {?} == {?}

-------------------------------------------------------------------------------
./failing/string literals
...............................................................................

TrickyTests.cpp:106: FAILED:
  REQUIRE( std::string( "first" ) == "second" )
with expansion:
  "first" == "second"

-------------------------------------------------------------------------------
./succeeding/side-effects
...............................................................................

TrickyTests.cpp:119:
PASSED:
  REQUIRE( i++ == 7 )
with expansion:
  7 == 7

TrickyTests.cpp:120:
PASSED:
  REQUIRE( i++ == 8 )
with expansion:
  8 == 8

-------------------------------------------------------------------------------
./succeeding/koenig
...............................................................................

TrickyTests.cpp:186:
PASSED:
  REQUIRE( 0x<hex digits> == o )
with expansion:
  0x<hex digits> == {?}

-------------------------------------------------------------------------------
./succeeding/non-const==
...............................................................................

TrickyTests.cpp:212:
PASSED:
  REQUIRE( t == 1u )
with expansion:
  {?} == 1

-------------------------------------------------------------------------------
./succeeding/enum/bits
...............................................................................

TrickyTests.cpp:224:
PASSED:
  REQUIRE( 0x<hex digits> == bit30and31 )
with expansion:
  0x<hex digits> == 3221225472

-------------------------------------------------------------------------------
./succeeding/boolean member
...............................................................................

TrickyTests.cpp:239:
PASSED:
  REQUIRE( obj.prop != __null )
with expansion:
  0x<hex digits> != 0

-------------------------------------------------------------------------------
./succeeding/unimplemented static bool
  compare to true
...............................................................................

TrickyTests.cpp:259:
PASSED:
  REQUIRE( is_true<true>::value == true )
with expansion:
  true == true

TrickyTests.cpp:260:
PASSED:
  REQUIRE( true == is_true<true>::value )
with expansion:
  true == true

-------------------------------------------------------------------------------
./succeeding/unimplemented static bool
  compare to false
...............................................................................

TrickyTests.cpp:264:
PASSED:
  REQUIRE( is_true<false>::value == false )
with expansion:
  false == false

TrickyTests.cpp:265:
PASSED:
  REQUIRE( false == is_true<false>::value )
with expansion:
  false == false

-------------------------------------------------------------------------------
./succeeding/unimplemented static bool
  negation
...............................................................................

TrickyTests.cpp:270:
PASSED:
  REQUIRE( !is_true<false>::value )
with expansion:
  true

-------------------------------------------------------------------------------
./succeeding/unimplemented static bool
  double negation
...............................................................................

TrickyTests.cpp:275:
PASSED:
  REQUIRE( !!is_true<true>::value )
with expansion:
  true

-------------------------------------------------------------------------------
./succeeding/unimplemented static bool
  direct
...............................................................................

TrickyTests.cpp:280:
PASSED:
  REQUIRE( is_true<true>::value )
with expansion:
  true

TrickyTests.cpp:281:
PASSED:
  REQUIRE_FALSE( !is_true<false>::value )
with expansion:
  !false

-------------------------------------------------------------------------------
./succeeding/SafeBool
...............................................................................

TrickyTests.cpp:313:
PASSED:
  CHECK( True )
with expansion:
  true

TrickyTests.cpp:314:
PASSED:
  CHECK( !False )
with expansion:
  true

TrickyTests.cpp:315:
PASSED:
  CHECK_FALSE( !False )
with expansion:
  !false

-------------------------------------------------------------------------------
Assertions then sections
...............................................................................

TrickyTests.cpp:323:
PASSED:
  REQUIRE( Catch::isTrue( true ) )
with expansion:
  true

-------------------------------------------------------------------------------
Assertions then sections
  A section
...............................................................................

TrickyTests.cpp:327:
PASSED:
  REQUIRE( Catch::isTrue( true ) )
with expansion:
  true

-------------------------------------------------------------------------------
Assertions then sections
  A section
  Another section
...............................................................................

TrickyTests.cpp:331:
PASSED:
  REQUIRE( Catch::isTrue( true ) )
with expansion:
  true

-------------------------------------------------------------------------------
Assertions then sections
...............................................................................

TrickyTests.cpp:323:
PASSED:
  REQUIRE( Catch::isTrue( true ) )
with expansion:
  true

-------------------------------------------------------------------------------
Assertions then sections
  A section
...............................................................................

TrickyTests.cpp:327:
PASSED:
  REQUIRE( Catch::isTrue( true ) )
with expansion:
  true

-------------------------------------------------------------------------------
Assertions then sections
  A section
  Another other section
...............................................................................

TrickyTests.cpp:335:
PASSED:
  REQUIRE( Catch::isTrue( true ) )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Do that thing with the thing
  Given: This stuff exists
   When: I do this
   Then: it should do this
...............................................................................

BDDTests.cpp:21:
PASSED:
  REQUIRE( itDoesThis() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Do that thing with the thing
  Given: This stuff exists
   When: I do this
   Then: it should do this
    And: do that
...............................................................................

BDDTests.cpp:23:
PASSED:
  REQUIRE( itDoesThat() )
with expansion:
  true

===============================================================================
101 test cases - 47 failed (625 assertions - 104 failed)


CatchSelfTest is a CATCH v0.9 b25 (integration) host application.
Run with -? for options

-------------------------------------------------------------------------------
./succeeding/Approx/simple
...............................................................................

ApproxTests.cpp:20:
PASSED:
  REQUIRE( d == Approx( 1.23 ) )
with expansion:
  1.23 == Approx( 1.23 )

ApproxTests.cpp:21:
PASSED:
  REQUIRE( d != Approx( 1.22 ) )
with expansion:
  1.23 != Approx( 1.22 )

ApproxTests.cpp:22:
PASSED:
  REQUIRE( d != Approx( 1.24 ) )
with expansion:
  1.23 != Approx( 1.24 )

ApproxTests.cpp:24:
PASSED:
  REQUIRE( Approx( d ) == 1.23 )
with expansion:
  Approx( 1.23 ) == 1.23

ApproxTests.cpp:25:
PASSED:
  REQUIRE( Approx( d ) != 1.22 )
with expansion:
  Approx( 1.23 ) != 1.22

ApproxTests.cpp:26:
PASSED:
  REQUIRE( Approx( d ) != 1.24 )
with expansion:
  Approx( 1.23 ) != 1.24

-------------------------------------------------------------------------------
./succeeding/Approx/epsilon
...............................................................................

ApproxTests.cpp:38:
PASSED:
  REQUIRE( d != Approx( 1.231 ) )
with expansion:
  1.23 != Approx( 1.231 )

ApproxTests.cpp:39:
PASSED:
  REQUIRE( d == Approx( 1.231 ).epsilon( 0.1 ) )
with expansion:
  1.23 == Approx( 1.231 )

-------------------------------------------------------------------------------
./succeeding/Approx/float
...............................................................................

ApproxTests.cpp:49:
PASSED:
  REQUIRE( 1.23f == Approx( 1.23f ) )
with expansion:
  1.23 == Approx( 1.23 )

ApproxTests.cpp:50:
PASSED:
  REQUIRE( 0.0f == Approx( 0.0f ) )
with expansion:
  0 == Approx( 0 )

-------------------------------------------------------------------------------
./succeeding/Approx/int
...............................................................................

ApproxTests.cpp:60:
PASSED:
  REQUIRE( 1 == Approx( 1 ) )

ApproxTests.cpp:61:
PASSED:
  REQUIRE( 0 == Approx( 0 ) )

-------------------------------------------------------------------------------
./succeeding/Approx/mixed
...............................................................................

ApproxTests.cpp:75:
PASSED:
  REQUIRE( 1.0f == Approx( 1 ) )
with expansion:
  1 == Approx( 1 )

ApproxTests.cpp:76:
PASSED:
  REQUIRE( 0 == Approx( dZero) )
with expansion:
  0 == Approx( 0 )

ApproxTests.cpp:77:
PASSED:
  REQUIRE( 0 == Approx( dSmall ).epsilon( 0.001 ) )
with expansion:
  0 == Approx( 1e-05 )

ApproxTests.cpp:78:
PASSED:
  REQUIRE( 1.234f == Approx( dMedium ) )
with expansion:
  1.234 == Approx( 1.234 )

ApproxTests.cpp:79:
PASSED:
  REQUIRE( dMedium == Approx( 1.234f ) )
with expansion:
  1.234 == Approx( 1.234 )

-------------------------------------------------------------------------------
./succeeding/Approx/custom
...............................................................................

ApproxTests.cpp:93:
PASSED:
  REQUIRE( d == approx( 1.23 ) )
with expansion:
  1.23 == Approx( 1.23 )

ApproxTests.cpp:94:
PASSED:
  REQUIRE( d == approx( 1.22 ) )
with expansion:
  1.23 == Approx( 1.22 )

ApproxTests.cpp:95:
PASSED:
  REQUIRE( d == approx( 1.24 ) )
with expansion:
  1.23 == Approx( 1.24 )

ApproxTests.cpp:96:
PASSED:
  REQUIRE( d != approx( 1.25 ) )
with expansion:
  1.23 != Approx( 1.25 )

ApproxTests.cpp:98:
PASSED:
  REQUIRE( approx( d ) == 1.23 )
with expansion:
  Approx( 1.23 ) == 1.23

ApproxTests.cpp:99:
PASSED:
  REQUIRE( approx( d ) == 1.22 )
with expansion:
  Approx( 1.23 ) == 1.22

ApproxTests.cpp:100:
PASSED:
  REQUIRE( approx( d ) == 1.24 )
with expansion:
  Approx( 1.23 ) == 1.24

ApproxTests.cpp:101:
PASSED:
  REQUIRE( approx( d ) != 1.25 )
with expansion:
  Approx( 1.23 ) != 1.25

-------------------------------------------------------------------------------
Approximate PI
...............................................................................

ApproxTests.cpp:110:
PASSED:
  REQUIRE( divide( 22, 7 ) == Approx( 3.141 ).epsilon( 0.001 ) )
with expansion:
  3.142857142857143 == Approx( 3.141 )

ApproxTests.cpp:111:
PASSED:
  REQUIRE( divide( 22, 7 ) != Approx( 3.141 ).epsilon( 0.0001 ) )
with expansion:
  3.142857142857143 != Approx( 3.141 )

-------------------------------------------------------------------------------
./succeeding/TestClass/succeedingCase
...............................................................................

ClassTests.cpp:24:
PASSED:
  REQUIRE( s == "hello" )
with expansion:
  "hello" == "hello"

-------------------------------------------------------------------------------
./failing/TestClass/failingCase
...............................................................................

ClassTests.cpp:28: FAILED:
  REQUIRE( s == "world" )
with expansion:
  "hello" == "world"

-------------------------------------------------------------------------------
./succeeding/Fixture/succeedingCase
...............................................................................

ClassTests.cpp:47:
PASSED:
  REQUIRE( m_a == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
./failing/Fixture/failingCase
...............................................................................

ClassTests.cpp:55: FAILED:
  REQUIRE( m_a == 2 )
with expansion:
  1 == 2

-------------------------------------------------------------------------------
./succeeding/conditions/equality
...............................................................................

ConditionTests.cpp:55:
PASSED:
  REQUIRE( data.int_seven == 7 )
with expansion:
  7 == 7

ConditionTests.cpp:56:
PASSED:
  REQUIRE( data.float_nine_point_one == Approx( 9.1f ) )
with expansion:
  9.1 == Approx( 9.1 )

ConditionTests.cpp:57:
PASSED:
  REQUIRE( data.double_pi == Approx( 3.1415926535 ) )
with expansion:
  3.1415926535 == Approx( 3.14159 )

ConditionTests.cpp:58:
PASSED:
  REQUIRE( data.str_hello == "hello" )
with expansion:
  "hello" == "hello"

ConditionTests.cpp:59:
PASSED:
  REQUIRE( "hello" == data.str_hello )
with expansion:
  "hello" == "hello"

ConditionTests.cpp:60:
PASSED:
  REQUIRE( data.str_hello.size() == 5 )
with expansion:
  5 == 5

ConditionTests.cpp:63:
PASSED:
  REQUIRE( x == Approx( 1.3 ) )
with expansion:
  1.3 == Approx( 1.3 )

-------------------------------------------------------------------------------
./failing/conditions/equality
...............................................................................

ConditionTests.cpp:71: FAILED:
  CHECK( data.int_seven == 6 )
with expansion:
  7 == 6

ConditionTests.cpp:72: FAILED:
  CHECK( data.int_seven == 8 )
with expansion:
  7 == 8

===============================================================================
13 test cases - 3 failed (40 assertions - 4 failed)

<testsuites>
  <testsuite name="~dummy" errors="9" failures="77" tests="625" hostname="tbd" time="tbd" timestamp="tbd">
    <testcase classname="global" name="./succeeding/Approx/simple" time="tbd"/>
    <testcase classname="global" name="./succeeding/Approx/epsilon" time="tbd"/>
    <testcase classname="global" name="./succeeding/Approx/float" time="tbd"/>
    <testcase classname="global" name="./succeeding/Approx/int" time="tbd"/>
    <testcase classname="global" name="./succeeding/Approx/mixed" time="tbd"/>
    <testcase classname="global" name="./succeeding/Approx/custom" time="tbd"/>
    <testcase classname="global" name="Approximate PI" time="tbd"/>
    <testcase classname="TestClass" name="./succeeding/TestClass/succeedingCase" time="tbd"/>
    <testcase classname="TestClass" name="./failing/TestClass/failingCase" time="tbd">
      <failure message="&quot;hello&quot; == &quot;world&quot;" type="REQUIRE">
ClassTests.cpp:28
      </failure>
    </testcase>
    <testcase classname="Fixture" name="./succeeding/Fixture/succeedingCase" time="tbd"/>
    <testcase classname="Fixture" name="./failing/Fixture/failingCase" time="tbd">
      <failure message="1 == 2" type="REQUIRE">
ClassTests.cpp:55
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/conditions/equality" time="tbd"/>
    <testcase classname="global" name="./failing/conditions/equality" time="tbd">
      <failure message="7 == 6" type="CHECK">
ConditionTests.cpp:71
      </failure>
      <failure message="7 == 8" type="CHECK">
ConditionTests.cpp:72
      </failure>
      <failure message="7 == 0" type="CHECK">
ConditionTests.cpp:73
      </failure>
      <failure message="9.1 == Approx( 9.11 )" type="CHECK">
ConditionTests.cpp:74
      </failure>
      <failure message="9.1 == Approx( 9 )" type="CHECK">
ConditionTests.cpp:75
      </failure>
      <failure message="9.1 == Approx( 1 )" type="CHECK">
ConditionTests.cpp:76
      </failure>
      <failure message="9.1 == Approx( 0 )" type="CHECK">
ConditionTests.cpp:77
      </failure>
      <failure message="3.1415926535 == Approx( 3.1415 )" type="CHECK">
ConditionTests.cpp:78
      </failure>
      <failure message="&quot;hello&quot; == &quot;goodbye&quot;" type="CHECK">
ConditionTests.cpp:79
      </failure>
      <failure message="&quot;hello&quot; == &quot;hell&quot;" type="CHECK">
ConditionTests.cpp:80
      </failure>
      <failure message="&quot;hello&quot; == &quot;hello1&quot;" type="CHECK">
ConditionTests.cpp:81
      </failure>
      <failure message="5 == 6" type="CHECK">
ConditionTests.cpp:82
      </failure>
      <failure message="1.3 == Approx( 1.301 )" type="CHECK">
ConditionTests.cpp:85
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/conditions/inequality" time="tbd"/>
    <testcase classname="global" name="./failing/conditions/inequality" time="tbd">
      <failure message="7 != 7" type="CHECK">
ConditionTests.cpp:111
      </failure>
      <failure message="9.1 != Approx( 9.1 )" type="CHECK">
ConditionTests.cpp:112
      </failure>
      <failure message="3.1415926535 != Approx( 3.14159 )" type="CHECK">
ConditionTests.cpp:113
      </failure>
      <failure message="&quot;hello&quot; != &quot;hello&quot;" type="CHECK">
ConditionTests.cpp:114
      </failure>
      <failure message="5 != 5" type="CHECK">
ConditionTests.cpp:115
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/conditions/ordered" time="tbd"/>
    <testcase classname="global" name="./failing/conditions/ordered" time="tbd">
      <failure message="7 > 7" type="CHECK">
ConditionTests.cpp:152
      </failure>
      <failure message="7 &lt; 7" type="CHECK">
ConditionTests.cpp:153
      </failure>
      <failure message="7 > 8" type="CHECK">
ConditionTests.cpp:154
      </failure>
      <failure message="7 &lt; 6" type="CHECK">
ConditionTests.cpp:155
      </failure>
      <failure message="7 &lt; 0" type="CHECK">
ConditionTests.cpp:156
      </failure>
      <failure message="7 &lt; -1" type="CHECK">
ConditionTests.cpp:157
      </failure>
      <failure message="7 >= 8" type="CHECK">
ConditionTests.cpp:159
      </failure>
      <failure message="7 &lt;= 6" type="CHECK">
ConditionTests.cpp:160
      </failure>
      <failure message="9.1 &lt; 9" type="CHECK">
ConditionTests.cpp:162
      </failure>
      <failure message="9.1 > 10" type="CHECK">
ConditionTests.cpp:163
      </failure>
      <failure message="9.1 > 9.199999999999999" type="CHECK">
ConditionTests.cpp:164
      </failure>
      <failure message="&quot;hello&quot; > &quot;hello&quot;" type="CHECK">
ConditionTests.cpp:166
      </failure>
      <failure message="&quot;hello&quot; &lt; &quot;hello&quot;" type="CHECK">
ConditionTests.cpp:167
      </failure>
      <failure message="&quot;hello&quot; > &quot;hellp&quot;" type="CHECK">
ConditionTests.cpp:168
      </failure>
      <failure message="&quot;hello&quot; > &quot;z&quot;" type="CHECK">
ConditionTests.cpp:169
      </failure>
      <failure message="&quot;hello&quot; &lt; &quot;hellm&quot;" type="CHECK">
ConditionTests.cpp:170
      </failure>
      <failure message="&quot;hello&quot; &lt; &quot;a&quot;" type="CHECK">
ConditionTests.cpp:171
      </failure>
      <failure message="&quot;hello&quot; >= &quot;z&quot;" type="CHECK">
ConditionTests.cpp:173
      </failure>
      <failure message="&quot;hello&quot; &lt;= &quot;a&quot;" type="CHECK">
ConditionTests.cpp:174
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/conditions/int literals" time="tbd"/>
    <testcase classname="global" name="./succeeding/conditions//long_to_unsigned_x" time="tbd"/>
    <testcase classname="global" name="./succeeding/conditions/const ints to int literal" time="tbd"/>
    <testcase classname="global" name="./succeeding/conditions/negative ints" time="tbd"/>
    <testcase classname="global" name="./succeeding/conditions/computed ints" time="tbd"/>
    <testcase classname="global" name="./succeeding/conditions/ptr" time="tbd"/>
    <testcase classname="global" name="./succeeding/conditions/not" time="tbd"/>
    <testcase classname="global" name="./failing/conditions/not" time="tbd">
      <failure message="false != false" type="CHECK">
ConditionTests.cpp:334
      </failure>
      <failure message="true != true" type="CHECK">
ConditionTests.cpp:335
      </failure>
      <failure message="false" type="CHECK">
ConditionTests.cpp:336
      </failure>
      <failure message="!true" type="CHECK_FALSE">
ConditionTests.cpp:337
      </failure>
      <failure message="false" type="CHECK">
ConditionTests.cpp:339
      </failure>
      <failure message="!true" type="CHECK_FALSE">
ConditionTests.cpp:340
      </failure>
      <failure message="false" type="CHECK">
ConditionTests.cpp:342
      </failure>
      <failure message="!(1 == 1)" type="CHECK_FALSE">
ConditionTests.cpp:343
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/exceptions/explicit" time="tbd"/>
    <testcase classname="global" name="./failing/exceptions/explicit" time="tbd">
      <error message="thisThrows()" type="CHECK_THROWS_AS">
ExceptionTests.cpp:43
      </error>
      < message="thisDoesntThrow()" type="CHECK_THROWS_AS">
ExceptionTests.cpp:44
      </>
      <error message="thisThrows()" type="CHECK_NOTHROW">
ExceptionTests.cpp:45
      </error>
    </testcase>
    <testcase classname="global" name="./failing/exceptions/implicit" time="tbd">
      <error type="TEST_CASE">
ExceptionTests.cpp:48
      </error>
    </testcase>
    <testcase classname="global" name="./failing/exceptions/implicit/2" time="tbd">
      <error message="{Unknown expression after the reported line}">
ExceptionTests.cpp:56
      </error>
    </testcase>
    <testcase classname="global" name="./failing/exceptions/implicit/3" time="tbd">
      <error type="TEST_CASE">
ExceptionTests.cpp:62
      </error>
    </testcase>
    <testcase classname="global" name="./succeeding/exceptions/implicit" time="tbd"/>
    <testcase classname="global" name="./failing/exceptions/custom" time="tbd">
      <error type="TEST_CASE">
ExceptionTests.cpp:106
      </error>
    </testcase>
    <testcase classname="global" name="./failing/exceptions/custom/nothrow" time="tbd">
      <error message="throw CustomException( &quot;unexpected custom exception&quot; )" type="REQUIRE_NOTHROW">
ExceptionTests.cpp:113
      </error>
    </testcase>
    <testcase classname="global" name="./failing/exceptions/custom/throw" time="tbd">
      <error message="throw CustomException( &quot;custom exception - not std&quot; )" type="REQUIRE_THROWS_AS">
ExceptionTests.cpp:118
      </error>
    </testcase>
    <testcase classname="global" name="./failing/exceptions/custom/double" time="tbd">
      <error type="TEST_CASE">
ExceptionTests.cpp:122
      </error>
    </testcase>
    <testcase classname="global" name="./succeeding/exceptions/notimplemented" time="tbd"/>
    <testcase classname="global" name="./succeeding/generators/1" time="tbd"/>
    <testcase classname="global" name="./succeeding/generators/2" time="tbd"/>
    <testcase classname="global" name="./succeeding/message" time="tbd">
      <warning type="WARN">
MessageTests.cpp:14
      </warning>
    </testcase>
    <testcase classname="global" name="./succeeding/succeed" time="tbd"/>
    <testcase classname="global" name="./failing/message/info/1" time="tbd">
      <failure message="2 == 1" type="REQUIRE">
MessageTests.cpp:26
      </failure>
    </testcase>
    <testcase classname="global" name="./mixed/message/info/2" time="tbd">
      <failure message="2 == 1" type="CHECK">
MessageTests.cpp:37
      </failure>
      <failure message="2 == 0" type="CHECK">
MessageTests.cpp:41
      </failure>
    </testcase>
    <testcase classname="global" name="./failing/message/fail" time="tbd">
      <failure type="FAIL">
MessageTests.cpp:51
      </failure>
    </testcase>
    <testcase classname="global" name="./failing/message/sections" time="tbd">
      <failure type="FAIL">
MessageTests.cpp:58
      </failure>
      <failure type="FAIL">
MessageTests.cpp:63
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/message/sections/stdout" time="tbd">
      <system-out>
Message from section one
Message from section two
      </system-out>
    </testcase>
    <testcase classname="global" name="./mixed/message/scoped" time="tbd">
      <failure message="10 &lt; 10" type="REQUIRE">
MessageTests.cpp:86
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/nofail" time="tbd">
      <failure message="1 == 2" type="CHECK_NOFAIL">
MessageTests.cpp:92
      </failure>
    </testcase>
    <testcase classname="global" name="just info" time="tbd"/>
    <testcase classname="global" name="just failure" time="tbd">
      <failure type="FAIL">
MessageTests.cpp:101
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/Misc/Sections" time="tbd"/>
    <testcase classname="global" name="./succeeding/Misc/Sections/nested" time="tbd"/>
    <testcase classname="global" name="./mixed/Misc/Sections/nested2" time="tbd">
      <failure message="1 == 2" type="REQUIRE">
MiscTests.cpp:57
      </failure>
    </testcase>
    <testcase classname="global" name="./Sections/nested/a/b" time="tbd"/>
    <testcase classname="global" name="./mixed/Misc/Sections/loops" time="tbd">
      <failure message="0 > 1" type="CHECK">
MiscTests.cpp:99
      </failure>
    </testcase>
    <testcase classname="global" name="./mixed/Misc/loops" time="tbd">
      <failure message="1 == 0" type="CHECK">
MiscTests.cpp:111
      </failure>
      <failure message="1 == 0" type="CHECK">
MiscTests.cpp:111
      </failure>
      <failure message="1 == 0" type="CHECK">
MiscTests.cpp:111
      </failure>
      <failure message="1 == 0" type="CHECK">
MiscTests.cpp:111
      </failure>
      <failure message="1 == 0" type="CHECK">
MiscTests.cpp:111
      </failure>
      <failure message="1 == 0" type="CHECK">
MiscTests.cpp:111
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/Misc/stdout,stderr" time="tbd">
      <system-out>
Some information
      </system-out>
      <system-err>
An error
      </system-err>
    </testcase>
    <testcase classname="global" name="./succeeding/Misc/null strings" time="tbd"/>
    <testcase classname="global" name="./failing/info" time="tbd">
      <failure message="false" type="REQUIRE">
MiscTests.cpp:138
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/checkedif" time="tbd"/>
    <testcase classname="global" name="./failing/checkedif" time="tbd">
      <failure message="false" type="CHECKED_IF">
MiscTests.cpp:143
      </failure>
      <failure message="false" type="REQUIRE">
MiscTests.cpp:156
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/checkedelse" time="tbd"/>
    <testcase classname="global" name="./failing/checkedelse" time="tbd">
      <failure message="false" type="CHECKED_ELSE">
MiscTests.cpp:161
      </failure>
      <failure message="false" type="REQUIRE">
MiscTests.cpp:174
      </failure>
    </testcase>
    <testcase classname="global" name="./misc/xmlentitycheck" time="tbd"/>
    <testcase classname="global" name="./manual/onechar" time="tbd">
      <failure message="false" type="REQUIRE">
MiscTests.cpp:192
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/atomic if" time="tbd"/>
    <testcase classname="global" name="./succeeding/matchers" time="tbd"/>
    <testcase classname="global" name="./failing/matchers/Contains" time="tbd">
      <failure message="&quot;this string contains 'abc' as a substring&quot; contains: &quot;not there&quot;" type="CHECK_THAT">
MiscTests.cpp:221
      </failure>
    </testcase>
    <testcase classname="global" name="./failing/matchers/StartsWith" time="tbd">
      <failure message="&quot;this string contains 'abc' as a substring&quot; starts with: &quot;string&quot;" type="CHECK_THAT">
MiscTests.cpp:226
      </failure>
    </testcase>
    <testcase classname="global" name="./failing/matchers/EndsWith" time="tbd">
      <failure message="&quot;this string contains 'abc' as a substring&quot; ends with: &quot;this&quot;" type="CHECK_THAT">
MiscTests.cpp:231
      </failure>
    </testcase>
    <testcase classname="global" name="./failing/matchers/Equals" time="tbd">
      <failure message="&quot;this string contains 'abc' as a substring&quot; equals: &quot;something else&quot;" type="CHECK_THAT">
MiscTests.cpp:236
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/matchers/AllOf" time="tbd"/>
    <testcase classname="global" name="./succeeding/matchers/AnyOf" time="tbd"/>
    <testcase classname="global" name="./succeeding/matchers/Equals" time="tbd"/>
    <testcase classname="global" name="example/factorial" time="tbd"/>
    <testcase classname="global" name="empty" time="tbd"/>
    <testcase classname="global" name="Nice descriptive name" time="tbd">
      <warning type="WARN">
MiscTests.cpp:278
      </warning>
    </testcase>
    <testcase classname="global" name="first tag" time="tbd"/>
    <testcase classname="global" name="second tag" time="tbd"/>
    <testcase classname="global" name="selftest/main" time="tbd">
      <system-out>
Message from section one
Message from section two
Some information
Message from section one
Message from section two
Some information
      </system-out>
      <system-err>
An error
An error
      </system-err>
    </testcase>
    <testcase classname="global" name="meta/Misc/Sections" time="tbd"/>
    <testcase classname="global" name="selftest/parser/2" time="tbd"/>
    <testcase classname="global" name="selftest/test filter" time="tbd"/>
    <testcase classname="global" name="selftest/test filters" time="tbd"/>
    <testcase classname="global" name="selftest/filter/prefix wildcard" time="tbd"/>
    <testcase classname="global" name="selftest/filter/wildcard at both ends" time="tbd"/>
    <testcase classname="global" name="selftest/option parsers" time="tbd"/>
    <testcase classname="global" name="selftest/tags" time="tbd"/>
    <testcase classname="global" name="./succeeding/Tricky/std::pair" time="tbd"/>
    <testcase classname="global" name="./inprogress/failing/Tricky/trailing expression" time="tbd">
      <warning type="WARN">
TrickyTests.cpp:55
      </warning>
    </testcase>
    <testcase classname="global" name="./inprogress/failing/Tricky/compound lhs" time="tbd">
      <warning type="WARN">
TrickyTests.cpp:71
      </warning>
    </testcase>
    <testcase classname="global" name="./failing/Tricky/non streamable type" time="tbd">
      <failure message="0x<hex digits> == 0x<hex digits>" type="CHECK">
TrickyTests.cpp:95
      </failure>
      <failure message="{?} == {?}" type="CHECK">
TrickyTests.cpp:96
      </failure>
    </testcase>
    <testcase classname="global" name="./failing/string literals" time="tbd">
      <failure message="&quot;first&quot; == &quot;second&quot;" type="REQUIRE">
TrickyTests.cpp:106
      </failure>
    </testcase>
    <testcase classname="global" name="./succeeding/side-effects" time="tbd"/>
    <testcase classname="global" name="./succeeding/koenig" time="tbd"/>
    <testcase classname="global" name="./succeeding/non-const==" time="tbd"/>
    <testcase classname="global" name="./succeeding/enum/bits" time="tbd"/>
    <testcase classname="global" name="./succeeding/boolean member" time="tbd"/>
    <testcase classname="global" name="./succeeding/unimplemented static bool" time="tbd"/>
    <testcase classname="global" name="./succeeding/SafeBool" time="tbd"/>
    <testcase classname="global" name="Assertions then sections" time="tbd"/>
    <testcase classname="global" name="Scenario: Do that thing with the thing" time="tbd"/>
  </testsuite>
  <system-out>
Message from section one
Message from section two

Some information

Message from section one
Message from section two
Some information
Message from section one
Message from section two
Some information
  </system-out>
  <system-err>
An error

An error
An error
  </system-err>
</testsuites>
<Catch name="CatchSelfTest">
  <Group name="~dummy">
    <TestCase name="./succeeding/Approx/simple">
ApproxTests.cpp" line="20">
        <Original>
          d == Approx( 1.23 )
        </Original>
        <Expanded>
          1.23 == Approx( 1.23 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="21">
        <Original>
          d != Approx( 1.22 )
        </Original>
        <Expanded>
          1.23 != Approx( 1.22 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="22">
        <Original>
          d != Approx( 1.24 )
        </Original>
        <Expanded>
          1.23 != Approx( 1.24 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="24">
        <Original>
          Approx( d ) == 1.23
        </Original>
        <Expanded>
          Approx( 1.23 ) == 1.23
        </Expanded>
      </Expression>
ApproxTests.cpp" line="25">
        <Original>
          Approx( d ) != 1.22
        </Original>
        <Expanded>
          Approx( 1.23 ) != 1.22
        </Expanded>
      </Expression>
ApproxTests.cpp" line="26">
        <Original>
          Approx( d ) != 1.24
        </Original>
        <Expanded>
          Approx( 1.23 ) != 1.24
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/Approx/epsilon">
ApproxTests.cpp" line="38">
        <Original>
          d != Approx( 1.231 )
        </Original>
        <Expanded>
          1.23 != Approx( 1.231 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="39">
        <Original>
          d == Approx( 1.231 ).epsilon( 0.1 )
        </Original>
        <Expanded>
          1.23 == Approx( 1.231 )
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/Approx/float">
ApproxTests.cpp" line="49">
        <Original>
          1.23f == Approx( 1.23f )
        </Original>
        <Expanded>
          1.23 == Approx( 1.23 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="50">
        <Original>
          0.0f == Approx( 0.0f )
        </Original>
        <Expanded>
          0 == Approx( 0 )
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/Approx/int">
ApproxTests.cpp" line="60">
        <Original>
          1 == Approx( 1 )
        </Original>
        <Expanded>
          1 == Approx( 1 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="61">
        <Original>
          0 == Approx( 0 )
        </Original>
        <Expanded>
          0 == Approx( 0 )
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/Approx/mixed">
ApproxTests.cpp" line="75">
        <Original>
          1.0f == Approx( 1 )
        </Original>
        <Expanded>
          1 == Approx( 1 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="76">
        <Original>
          0 == Approx( dZero)
        </Original>
        <Expanded>
          0 == Approx( 0 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="77">
        <Original>
          0 == Approx( dSmall ).epsilon( 0.001 )
        </Original>
        <Expanded>
          0 == Approx( 1e-05 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="78">
        <Original>
          1.234f == Approx( dMedium )
        </Original>
        <Expanded>
          1.234 == Approx( 1.234 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="79">
        <Original>
          dMedium == Approx( 1.234f )
        </Original>
        <Expanded>
          1.234 == Approx( 1.234 )
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/Approx/custom">
ApproxTests.cpp" line="93">
        <Original>
          d == approx( 1.23 )
        </Original>
        <Expanded>
          1.23 == Approx( 1.23 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="94">
        <Original>
          d == approx( 1.22 )
        </Original>
        <Expanded>
          1.23 == Approx( 1.22 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="95">
        <Original>
          d == approx( 1.24 )
        </Original>
        <Expanded>
          1.23 == Approx( 1.24 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="96">
        <Original>
          d != approx( 1.25 )
        </Original>
        <Expanded>
          1.23 != Approx( 1.25 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="98">
        <Original>
          approx( d ) == 1.23
        </Original>
        <Expanded>
          Approx( 1.23 ) == 1.23
        </Expanded>
      </Expression>
ApproxTests.cpp" line="99">
        <Original>
          approx( d ) == 1.22
        </Original>
        <Expanded>
          Approx( 1.23 ) == 1.22
        </Expanded>
      </Expression>
ApproxTests.cpp" line="100">
        <Original>
          approx( d ) == 1.24
        </Original>
        <Expanded>
          Approx( 1.23 ) == 1.24
        </Expanded>
      </Expression>
ApproxTests.cpp" line="101">
        <Original>
          approx( d ) != 1.25
        </Original>
        <Expanded>
          Approx( 1.23 ) != 1.25
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Approximate PI">
ApproxTests.cpp" line="110">
        <Original>
          divide( 22, 7 ) == Approx( 3.141 ).epsilon( 0.001 )
        </Original>
        <Expanded>
          3.142857142857143 == Approx( 3.141 )
        </Expanded>
      </Expression>
ApproxTests.cpp" line="111">
        <Original>
          divide( 22, 7 ) != Approx( 3.141 ).epsilon( 0.0001 )
        </Original>
        <Expanded>
          3.142857142857143 != Approx( 3.141 )
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/TestClass/succeedingCase">
ClassTests.cpp" line="24">
        <Original>
          s == &quot;hello&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; == &quot;hello&quot;
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/TestClass/failingCase">
ClassTests.cpp" line="28">
        <Original>
          s == &quot;world&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; == &quot;world&quot;
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/Fixture/succeedingCase">
ClassTests.cpp" line="47">
        <Original>
          m_a == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/Fixture/failingCase">
ClassTests.cpp" line="55">
        <Original>
          m_a == 2
        </Original>
        <Expanded>
          1 == 2
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/conditions/equality">
ConditionTests.cpp" line="55">
        <Original>
          data.int_seven == 7
        </Original>
        <Expanded>
          7 == 7
        </Expanded>
      </Expression>
ConditionTests.cpp" line="56">
        <Original>
          data.float_nine_point_one == Approx( 9.1f )
        </Original>
        <Expanded>
          9.1 == Approx( 9.1 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="57">
        <Original>
          data.double_pi == Approx( 3.1415926535 )
        </Original>
        <Expanded>
          3.1415926535 == Approx( 3.14159 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="58">
        <Original>
          data.str_hello == &quot;hello&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; == &quot;hello&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="59">
        <Original>
          &quot;hello&quot; == data.str_hello
        </Original>
        <Expanded>
          &quot;hello&quot; == &quot;hello&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="60">
        <Original>
          data.str_hello.size() == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
ConditionTests.cpp" line="63">
        <Original>
          x == Approx( 1.3 )
        </Original>
        <Expanded>
          1.3 == Approx( 1.3 )
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/conditions/equality">
ConditionTests.cpp" line="71">
        <Original>
          data.int_seven == 6
        </Original>
        <Expanded>
          7 == 6
        </Expanded>
      </Expression>
ConditionTests.cpp" line="72">
        <Original>
          data.int_seven == 8
        </Original>
        <Expanded>
          7 == 8
        </Expanded>
      </Expression>
ConditionTests.cpp" line="73">
        <Original>
          data.int_seven == 0
        </Original>
        <Expanded>
          7 == 0
        </Expanded>
      </Expression>
ConditionTests.cpp" line="74">
        <Original>
          data.float_nine_point_one == Approx( 9.11f )
        </Original>
        <Expanded>
          9.1 == Approx( 9.11 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="75">
        <Original>
          data.float_nine_point_one == Approx( 9.0f )
        </Original>
        <Expanded>
          9.1 == Approx( 9 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="76">
        <Original>
          data.float_nine_point_one == Approx( 1 )
        </Original>
        <Expanded>
          9.1 == Approx( 1 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="77">
        <Original>
          data.float_nine_point_one == Approx( 0 )
        </Original>
        <Expanded>
          9.1 == Approx( 0 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="78">
        <Original>
          data.double_pi == Approx( 3.1415 )
        </Original>
        <Expanded>
          3.1415926535 == Approx( 3.1415 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="79">
        <Original>
          data.str_hello == &quot;goodbye&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; == &quot;goodbye&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="80">
        <Original>
          data.str_hello == &quot;hell&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; == &quot;hell&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="81">
        <Original>
          data.str_hello == &quot;hello1&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; == &quot;hello1&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="82">
        <Original>
          data.str_hello.size() == 6
        </Original>
        <Expanded>
          5 == 6
        </Expanded>
      </Expression>
ConditionTests.cpp" line="85">
        <Original>
          x == Approx( 1.301 )
        </Original>
        <Expanded>
          1.3 == Approx( 1.301 )
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/conditions/inequality">
ConditionTests.cpp" line="93">
        <Original>
          data.int_seven != 6
        </Original>
        <Expanded>
          7 != 6
        </Expanded>
      </Expression>
ConditionTests.cpp" line="94">
        <Original>
          data.int_seven != 8
        </Original>
        <Expanded>
          7 != 8
        </Expanded>
      </Expression>
ConditionTests.cpp" line="95">
        <Original>
          data.float_nine_point_one != Approx( 9.11f )
        </Original>
        <Expanded>
          9.1 != Approx( 9.11 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="96">
        <Original>
          data.float_nine_point_one != Approx( 9.0f )
        </Original>
        <Expanded>
          9.1 != Approx( 9 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="97">
        <Original>
          data.float_nine_point_one != Approx( 1 )
        </Original>
        <Expanded>
          9.1 != Approx( 1 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="98">
        <Original>
          data.float_nine_point_one != Approx( 0 )
        </Original>
        <Expanded>
          9.1 != Approx( 0 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="99">
        <Original>
          data.double_pi != Approx( 3.1415 )
        </Original>
        <Expanded>
          3.1415926535 != Approx( 3.1415 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="100">
        <Original>
          data.str_hello != &quot;goodbye&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; != &quot;goodbye&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="101">
        <Original>
          data.str_hello != &quot;hell&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; != &quot;hell&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="102">
        <Original>
          data.str_hello != &quot;hello1&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; != &quot;hello1&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="103">
        <Original>
          data.str_hello.size() != 6
        </Original>
        <Expanded>
          5 != 6
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/conditions/inequality">
ConditionTests.cpp" line="111">
        <Original>
          data.int_seven != 7
        </Original>
        <Expanded>
          7 != 7
        </Expanded>
      </Expression>
ConditionTests.cpp" line="112">
        <Original>
          data.float_nine_point_one != Approx( 9.1f )
        </Original>
        <Expanded>
          9.1 != Approx( 9.1 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="113">
        <Original>
          data.double_pi != Approx( 3.1415926535 )
        </Original>
        <Expanded>
          3.1415926535 != Approx( 3.14159 )
        </Expanded>
      </Expression>
ConditionTests.cpp" line="114">
        <Original>
          data.str_hello != &quot;hello&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; != &quot;hello&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="115">
        <Original>
          data.str_hello.size() != 5
        </Original>
        <Expanded>
          5 != 5
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/conditions/ordered">
ConditionTests.cpp" line="124">
        <Original>
          data.int_seven &lt; 8
        </Original>
        <Expanded>
          7 &lt; 8
        </Expanded>
      </Expression>
ConditionTests.cpp" line="125">
        <Original>
          data.int_seven > 6
        </Original>
        <Expanded>
          7 > 6
        </Expanded>
      </Expression>
ConditionTests.cpp" line="126">
        <Original>
          data.int_seven > 0
        </Original>
        <Expanded>
          7 > 0
        </Expanded>
      </Expression>
ConditionTests.cpp" line="127">
        <Original>
          data.int_seven > -1
        </Original>
        <Expanded>
          7 > -1
        </Expanded>
      </Expression>
ConditionTests.cpp" line="129">
        <Original>
          data.int_seven >= 7
        </Original>
        <Expanded>
          7 >= 7
        </Expanded>
      </Expression>
ConditionTests.cpp" line="130">
        <Original>
          data.int_seven >= 6
        </Original>
        <Expanded>
          7 >= 6
        </Expanded>
      </Expression>
ConditionTests.cpp" line="131">
        <Original>
          data.int_seven &lt;= 7
        </Original>
        <Expanded>
          7 &lt;= 7
        </Expanded>
      </Expression>
ConditionTests.cpp" line="132">
        <Original>
          data.int_seven &lt;= 8
        </Original>
        <Expanded>
          7 &lt;= 8
        </Expanded>
      </Expression>
ConditionTests.cpp" line="134">
        <Original>
          data.float_nine_point_one > 9
        </Original>
        <Expanded>
          9.1 > 9
        </Expanded>
      </Expression>
ConditionTests.cpp" line="135">
        <Original>
          data.float_nine_point_one &lt; 10
        </Original>
        <Expanded>
          9.1 &lt; 10
        </Expanded>
      </Expression>
ConditionTests.cpp" line="136">
        <Original>
          data.float_nine_point_one &lt; 9.2
        </Original>
        <Expanded>
          9.1 &lt; 9.199999999999999
        </Expanded>
      </Expression>
ConditionTests.cpp" line="138">
        <Original>
          data.str_hello &lt;= &quot;hello&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; &lt;= &quot;hello&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="139">
        <Original>
          data.str_hello >= &quot;hello&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; >= &quot;hello&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="141">
        <Original>
          data.str_hello &lt; &quot;hellp&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; &lt; &quot;hellp&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="142">
        <Original>
          data.str_hello &lt; &quot;zebra&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; &lt; &quot;zebra&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="143">
        <Original>
          data.str_hello > &quot;hellm&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; > &quot;hellm&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="144">
        <Original>
          data.str_hello > &quot;a&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; > &quot;a&quot;
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/conditions/ordered">
ConditionTests.cpp" line="152">
        <Original>
          data.int_seven > 7
        </Original>
        <Expanded>
          7 > 7
        </Expanded>
      </Expression>
ConditionTests.cpp" line="153">
        <Original>
          data.int_seven &lt; 7
        </Original>
        <Expanded>
          7 &lt; 7
        </Expanded>
      </Expression>
ConditionTests.cpp" line="154">
        <Original>
          data.int_seven > 8
        </Original>
        <Expanded>
          7 > 8
        </Expanded>
      </Expression>
ConditionTests.cpp" line="155">
        <Original>
          data.int_seven &lt; 6
        </Original>
        <Expanded>
          7 &lt; 6
        </Expanded>
      </Expression>
ConditionTests.cpp" line="156">
        <Original>
          data.int_seven &lt; 0
        </Original>
        <Expanded>
          7 &lt; 0
        </Expanded>
      </Expression>
ConditionTests.cpp" line="157">
        <Original>
          data.int_seven &lt; -1
        </Original>
        <Expanded>
          7 &lt; -1
        </Expanded>
      </Expression>
ConditionTests.cpp" line="159">
        <Original>
          data.int_seven >= 8
        </Original>
        <Expanded>
          7 >= 8
        </Expanded>
      </Expression>
ConditionTests.cpp" line="160">
        <Original>
          data.int_seven &lt;= 6
        </Original>
        <Expanded>
          7 &lt;= 6
        </Expanded>
      </Expression>
ConditionTests.cpp" line="162">
        <Original>
          data.float_nine_point_one &lt; 9
        </Original>
        <Expanded>
          9.1 &lt; 9
        </Expanded>
      </Expression>
ConditionTests.cpp" line="163">
        <Original>
          data.float_nine_point_one > 10
        </Original>
        <Expanded>
          9.1 > 10
        </Expanded>
      </Expression>
ConditionTests.cpp" line="164">
        <Original>
          data.float_nine_point_one > 9.2
        </Original>
        <Expanded>
          9.1 > 9.199999999999999
        </Expanded>
      </Expression>
ConditionTests.cpp" line="166">
        <Original>
          data.str_hello > &quot;hello&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; > &quot;hello&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="167">
        <Original>
          data.str_hello &lt; &quot;hello&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; &lt; &quot;hello&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="168">
        <Original>
          data.str_hello > &quot;hellp&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; > &quot;hellp&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="169">
        <Original>
          data.str_hello > &quot;z&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; > &quot;z&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="170">
        <Original>
          data.str_hello &lt; &quot;hellm&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; &lt; &quot;hellm&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="171">
        <Original>
          data.str_hello &lt; &quot;a&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; &lt; &quot;a&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="173">
        <Original>
          data.str_hello >= &quot;z&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; >= &quot;z&quot;
        </Expanded>
      </Expression>
ConditionTests.cpp" line="174">
        <Original>
          data.str_hello &lt;= &quot;a&quot;
        </Original>
        <Expanded>
          &quot;hello&quot; &lt;= &quot;a&quot;
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/conditions/int literals">
ConditionTests.cpp" line="188">
        <Original>
          i == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
ConditionTests.cpp" line="189">
        <Original>
          ui == 2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
ConditionTests.cpp" line="190">
        <Original>
          l == 3
        </Original>
        <Expanded>
          3 == 3
        </Expanded>
      </Expression>
ConditionTests.cpp" line="191">
        <Original>
          ul == 4
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
ConditionTests.cpp" line="192">
        <Original>
          c == 5
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
ConditionTests.cpp" line="193">
        <Original>
          uc == 6
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
ConditionTests.cpp" line="195">
        <Original>
          1 == i
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
ConditionTests.cpp" line="196">
        <Original>
          2 == ui
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
ConditionTests.cpp" line="197">
        <Original>
          3 == l
        </Original>
        <Expanded>
          3 == 3
        </Expanded>
      </Expression>
ConditionTests.cpp" line="198">
        <Original>
          4 == ul
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
ConditionTests.cpp" line="199">
        <Original>
          5 == c
        </Original>
        <Expanded>
          5 == 5
        </Expanded>
      </Expression>
ConditionTests.cpp" line="200">
        <Original>
          6 == uc
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
ConditionTests.cpp" line="202">
        <Original>
          (std::numeric_limits&lt;unsigned long>::max)() > ul
        </Original>
        <Expanded>
          0x<hex digits> > 4
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/conditions//long_to_unsigned_x">
ConditionTests.cpp" line="223">
        <Original>
          long_var == unsigned_char_var
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
ConditionTests.cpp" line="224">
        <Original>
          long_var == unsigned_short_var
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
ConditionTests.cpp" line="225">
        <Original>
          long_var == unsigned_int_var
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
ConditionTests.cpp" line="226">
        <Original>
          long_var == unsigned_long_var
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/conditions/const ints to int literal">
ConditionTests.cpp" line="237">
        <Original>
          unsigned_char_var == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
ConditionTests.cpp" line="238">
        <Original>
          unsigned_short_var == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
ConditionTests.cpp" line="239">
        <Original>
          unsigned_int_var == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
ConditionTests.cpp" line="240">
        <Original>
          unsigned_long_var == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/conditions/negative ints">
ConditionTests.cpp" line="246">
        <Original>
          ( -1 > 2u )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
ConditionTests.cpp" line="247">
        <Original>
          -1 > 2u
        </Original>
        <Expanded>
          -1 > 2
        </Expanded>
      </Expression>
ConditionTests.cpp" line="249">
        <Original>
          ( 2u &lt; -1 )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
ConditionTests.cpp" line="250">
        <Original>
          2u &lt; -1
        </Original>
        <Expanded>
          2 &lt; -1
        </Expanded>
      </Expression>
ConditionTests.cpp" line="253">
        <Original>
          ( minInt > 2u )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
ConditionTests.cpp" line="254">
        <Original>
          minInt > 2u
        </Original>
        <Expanded>
          -2147483648 > 2
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/conditions/computed ints">
ConditionTests.cpp" line="269">
        <Original>
          54 == 6*9
        </Original>
        <Expanded>
          54 == 54
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/conditions/ptr">
ConditionTests.cpp" line="285">
        <Original>
          p == __null
        </Original>
        <Expanded>
          __null == 0
        </Expanded>
      </Expression>
ConditionTests.cpp" line="286">
        <Original>
          p == pNULL
        </Original>
        <Expanded>
          __null == __null
        </Expanded>
      </Expression>
ConditionTests.cpp" line="291">
        <Original>
          p != __null
        </Original>
        <Expanded>
          0x<hex digits> != 0
        </Expanded>
      </Expression>
ConditionTests.cpp" line="294">
        <Original>
          cp != __null
        </Original>
        <Expanded>
          0x<hex digits> != 0
        </Expanded>
      </Expression>
ConditionTests.cpp" line="297">
        <Original>
          cpc != __null
        </Original>
        <Expanded>
          0x<hex digits> != 0
        </Expanded>
      </Expression>
ConditionTests.cpp" line="299">
        <Original>
          returnsNull() == __null
        </Original>
        <Expanded>
          {null string} == 0
        </Expanded>
      </Expression>
ConditionTests.cpp" line="300">
        <Original>
          returnsConstNull() == __null
        </Original>
        <Expanded>
          {null string} == 0
        </Expanded>
      </Expression>
ConditionTests.cpp" line="302">
        <Original>
          __null != p
        </Original>
        <Expanded>
          0 != 0x<hex digits>
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/conditions/not">
ConditionTests.cpp" line="317">
        <Original>
          false == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
ConditionTests.cpp" line="318">
        <Original>
          true == true
        </Original>
        <Expanded>
          true == true
        </Expanded>
      </Expression>
ConditionTests.cpp" line="319">
        <Original>
          !false
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
ConditionTests.cpp" line="320">
        <Original>
          !false
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
ConditionTests.cpp" line="322">
        <Original>
          !falseValue
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
ConditionTests.cpp" line="323">
        <Original>
          !falseValue
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
ConditionTests.cpp" line="325">
        <Original>
          !(1 == 2)
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
ConditionTests.cpp" line="326">
        <Original>
          !1 == 2
        </Original>
        <Expanded>
          !(1 == 2)
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/conditions/not">
ConditionTests.cpp" line="334">
        <Original>
          false != false
        </Original>
        <Expanded>
          false != false
        </Expanded>
      </Expression>
ConditionTests.cpp" line="335">
        <Original>
          true != true
        </Original>
        <Expanded>
          true != true
        </Expanded>
      </Expression>
ConditionTests.cpp" line="336">
        <Original>
          !true
        </Original>
        <Expanded>
          false
        </Expanded>
      </Expression>
ConditionTests.cpp" line="337">
        <Original>
          !true
        </Original>
        <Expanded>
          !true
        </Expanded>
      </Expression>
ConditionTests.cpp" line="339">
        <Original>
          !trueValue
        </Original>
        <Expanded>
          false
        </Expanded>
      </Expression>
ConditionTests.cpp" line="340">
        <Original>
          !trueValue
        </Original>
        <Expanded>
          !true
        </Expanded>
      </Expression>
ConditionTests.cpp" line="342">
        <Original>
          !(1 == 1)
        </Original>
        <Expanded>
          false
        </Expanded>
      </Expression>
ConditionTests.cpp" line="343">
        <Original>
          !1 == 1
        </Original>
        <Expanded>
          !(1 == 1)
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/exceptions/explicit">
ExceptionTests.cpp" line="35">
        <Original>
          thisThrows()
        </Original>
        <Expanded>
          thisThrows()
        </Expanded>
      </Expression>
ExceptionTests.cpp" line="36">
        <Original>
          thisDoesntThrow()
        </Original>
        <Expanded>
          thisDoesntThrow()
        </Expanded>
      </Expression>
ExceptionTests.cpp" line="37">
        <Original>
          thisThrows()
        </Original>
        <Expanded>
          thisThrows()
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/exceptions/explicit">
ExceptionTests.cpp" line="43">
        <Original>
          thisThrows()
        </Original>
        <Expanded>
          thisThrows()
        </Expanded>
ExceptionTests.cpp" line="43">
          expected exception
        </Exception>
      </Expression>
ExceptionTests.cpp" line="44">
        <Original>
          thisDoesntThrow()
        </Original>
        <Expanded>
          thisDoesntThrow()
        </Expanded>
      </Expression>
ExceptionTests.cpp" line="45">
        <Original>
          thisThrows()
        </Original>
        <Expanded>
          thisThrows()
        </Expanded>
ExceptionTests.cpp" line="45">
          expected exception
        </Exception>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/exceptions/implicit">
ExceptionTests.cpp" line="48">
        unexpected exception
      </Exception>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/exceptions/implicit/2">
ExceptionTests.cpp" line="56">
        <Original>
          1 == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
ExceptionTests.cpp" line="56">
        <Original>
          {Unknown expression after the reported line}
        </Original>
        <Expanded>
          {Unknown expression after the reported line}
        </Expanded>
ExceptionTests.cpp" line="56">
          unexpected exception
        </Exception>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/exceptions/implicit/3">
      <Section name="section name">
ExceptionTests.cpp" line="62">
          unexpected exception
        </Exception>
        <OverallResults successes="0" failures="1"/>
      </Section>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/exceptions/implicit">
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/exceptions/custom">
ExceptionTests.cpp" line="106">
        custom exception
      </Exception>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/exceptions/custom/nothrow">
ExceptionTests.cpp" line="113">
        <Original>
          throw CustomException( &quot;unexpected custom exception&quot; )
        </Original>
        <Expanded>
          throw CustomException( &quot;unexpected custom exception&quot; )
        </Expanded>
ExceptionTests.cpp" line="113">
          unexpected custom exception
        </Exception>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/exceptions/custom/throw">
ExceptionTests.cpp" line="118">
        <Original>
          throw CustomException( &quot;custom exception - not std&quot; )
        </Original>
        <Expanded>
          throw CustomException( &quot;custom exception - not std&quot; )
        </Expanded>
ExceptionTests.cpp" line="118">
          custom exception - not std
        </Exception>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/exceptions/custom/double">
ExceptionTests.cpp" line="122">
        3.14
      </Exception>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/exceptions/notimplemented">
ExceptionTests.cpp" line="133">
        <Original>
          thisFunctionNotImplemented( 7 )
        </Original>
        <Expanded>
          thisFunctionNotImplemented( 7 )
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/generators/1">
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          200 == 200
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          200 == 200
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          200 == 200
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          200 == 200
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          200 == 200
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          30 == 30
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          200 == 200
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          40 == 40
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          200 == 200
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          42 == 42
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          200 == 200
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          72 == 72
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          200 == 200
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          202 == 202
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          202 == 202
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          202 == 202
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          202 == 202
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          202 == 202
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          30 == 30
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          202 == 202
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          40 == 40
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          202 == 202
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          42 == 42
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          202 == 202
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          72 == 72
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          202 == 202
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          204 == 204
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          204 == 204
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          204 == 204
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          204 == 204
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          204 == 204
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          30 == 30
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          204 == 204
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          40 == 40
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          204 == 204
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          42 == 42
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          204 == 204
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          72 == 72
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          204 == 204
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          206 == 206
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          206 == 206
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          206 == 206
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          206 == 206
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          206 == 206
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          30 == 30
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          206 == 206
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          40 == 40
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          206 == 206
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          42 == 42
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          206 == 206
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          72 == 72
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          206 == 206
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          208 == 208
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          208 == 208
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          208 == 208
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          208 == 208
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          208 == 208
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          30 == 30
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          208 == 208
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          40 == 40
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          208 == 208
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          42 == 42
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          208 == 208
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          72 == 72
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          208 == 208
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          210 == 210
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          210 == 210
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          210 == 210
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          210 == 210
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          210 == 210
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          30 == 30
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          210 == 210
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          40 == 40
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          210 == 210
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          42 == 42
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          210 == 210
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          72 == 72
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          210 == 210
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          212 == 212
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          212 == 212
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          212 == 212
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          212 == 212
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          212 == 212
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          30 == 30
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          212 == 212
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          40 == 40
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          212 == 212
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          42 == 42
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          212 == 212
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          72 == 72
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          212 == 212
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          214 == 214
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          4 == 4
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          214 == 214
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          214 == 214
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          214 == 214
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          10 == 10
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          214 == 214
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          30 == 30
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          214 == 214
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          40 == 40
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          214 == 214
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          42 == 42
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          214 == 214
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="26">
        <Original>
          multiply( i, 2 ) == i*2
        </Original>
        <Expanded>
          72 == 72
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="27">
        <Original>
          multiply( j, 2 ) == j*2
        </Original>
        <Expanded>
          214 == 214
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/generators/2">
GeneratorTests.cpp" line="40">
        <Original>
          i->first == i->second-1
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
GeneratorTests.cpp" line="40">
        <Original>
          i->first == i->second-1
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/message">
      <Warning>
        this is a warning
      </Warning>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/succeed">
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/message/info/1">
MessageTests.cpp" line="26">
        <Original>
          a == 1
        </Original>
        <Expanded>
          2 == 1
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./mixed/message/info/2">
MessageTests.cpp" line="33">
        <Original>
          a == 2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
MessageTests.cpp" line="37">
        <Original>
          a == 1
        </Original>
        <Expanded>
          2 == 1
        </Expanded>
      </Expression>
MessageTests.cpp" line="41">
        <Original>
          a == 0
        </Original>
        <Expanded>
          2 == 0
        </Expanded>
      </Expression>
MessageTests.cpp" line="45">
        <Original>
          a == 2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/message/fail">
      <Failure>
        This is a failure
      </Failure>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/message/sections">
      <Section name="one">
        <Failure>
          Message from section one
        </Failure>
        <OverallResults successes="0" failures="1"/>
      </Section>
      <Section name="two">
        <Failure>
          Message from section two
        </Failure>
        <OverallResults successes="0" failures="1"/>
      </Section>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/message/sections/stdout">
      <Section name="one">
        <OverallResults successes="0" failures="1"/>
      </Section>
      <Section name="two">
        <OverallResults successes="0" failures="1"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./mixed/message/scoped">
MessageTests.cpp" line="86">
        <Original>
          i &lt; 10
        </Original>
        <Expanded>
          0 &lt; 10
        </Expanded>
      </Expression>
MessageTests.cpp" line="86">
        <Original>
          i &lt; 10
        </Original>
        <Expanded>
          1 &lt; 10
        </Expanded>
      </Expression>
MessageTests.cpp" line="86">
        <Original>
          i &lt; 10
        </Original>
        <Expanded>
          2 &lt; 10
        </Expanded>
      </Expression>
MessageTests.cpp" line="86">
        <Original>
          i &lt; 10
        </Original>
        <Expanded>
          3 &lt; 10
        </Expanded>
      </Expression>
MessageTests.cpp" line="86">
        <Original>
          i &lt; 10
        </Original>
        <Expanded>
          4 &lt; 10
        </Expanded>
      </Expression>
MessageTests.cpp" line="86">
        <Original>
          i &lt; 10
        </Original>
        <Expanded>
          5 &lt; 10
        </Expanded>
      </Expression>
MessageTests.cpp" line="86">
        <Original>
          i &lt; 10
        </Original>
        <Expanded>
          6 &lt; 10
        </Expanded>
      </Expression>
MessageTests.cpp" line="86">
        <Original>
          i &lt; 10
        </Original>
        <Expanded>
          7 &lt; 10
        </Expanded>
      </Expression>
MessageTests.cpp" line="86">
        <Original>
          i &lt; 10
        </Original>
        <Expanded>
          8 &lt; 10
        </Expanded>
      </Expression>
MessageTests.cpp" line="86">
        <Original>
          i &lt; 10
        </Original>
        <Expanded>
          9 &lt; 10
        </Expanded>
      </Expression>
MessageTests.cpp" line="86">
        <Original>
          i &lt; 10
        </Original>
        <Expanded>
          10 &lt; 10
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/nofail">
MessageTests.cpp" line="92">
        <Original>
          1 == 2
        </Original>
        <Expanded>
          1 == 2
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="just info">
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="just failure">
      <Failure>
        Previous info should not be seen
      </Failure>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/Misc/Sections">
      <Section name="s1" description="doesn't equal">
MiscTests.cpp" line="21">
          <Original>
            a != b
          </Original>
          <Expanded>
            1 != 2
          </Expanded>
        </Expression>
MiscTests.cpp" line="22">
          <Original>
            b != a
          </Original>
          <Expanded>
            2 != 1
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="s2" description="not equal">
MiscTests.cpp" line="27">
          <Original>
            a != b
          </Original>
          <Expanded>
            1 != 2
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/Misc/Sections/nested">
      <Section name="s1" description="doesn't equal">
MiscTests.cpp" line="38">
          <Original>
            a != b
          </Original>
          <Expanded>
            1 != 2
          </Expanded>
        </Expression>
MiscTests.cpp" line="39">
          <Original>
            b != a
          </Original>
          <Expanded>
            2 != 1
          </Expanded>
        </Expression>
        <Section name="s2" description="not equal">
MiscTests.cpp" line="43">
            <Original>
              a != b
            </Original>
            <Expanded>
              1 != 2
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0"/>
        </Section>
        <OverallResults successes="3" failures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./mixed/Misc/Sections/nested2">
      <Section name="s1" description="doesn't equal">
        <Section name="s2" description="equal">
MiscTests.cpp" line="57">
            <Original>
              a == b
            </Original>
            <Expanded>
              1 == 2
            </Expanded>
          </Expression>
          <OverallResults successes="0" failures="1"/>
        </Section>
        <OverallResults successes="0" failures="1"/>
      </Section>
      <Section name="s1" description="doesn't equal">
        <Section name="s3" description="not equal">
MiscTests.cpp" line="62">
            <Original>
              a != b
            </Original>
            <Expanded>
              1 != 2
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0"/>
        </Section>
        <OverallResults successes="1" failures="0"/>
      </Section>
      <Section name="s1" description="doesn't equal">
        <Section name="s4" description="less than">
MiscTests.cpp" line="66">
            <Original>
              a &lt; b
            </Original>
            <Expanded>
              1 &lt; 2
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0"/>
        </Section>
        <OverallResults successes="1" failures="0"/>
      </Section>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./Sections/nested/a/b">
      <Section name="c">
        <Section name="d (leaf)">
          <OverallResults successes="0" failures="1"/>
        </Section>
        <OverallResults successes="0" failures="1"/>
      </Section>
      <Section name="c">
        <Section name="e (leaf)">
          <OverallResults successes="0" failures="1"/>
        </Section>
        <OverallResults successes="0" failures="1"/>
      </Section>
      <Section name="c">
        <OverallResults successes="0" failures="0"/>
      </Section>
      <Section name="f (leaf)">
        <OverallResults successes="0" failures="1"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./mixed/Misc/Sections/loops">
      <Section name="s1" description="b is currently: 0">
MiscTests.cpp" line="99">
          <Original>
            b > a
          </Original>
          <Expanded>
            0 > 1
          </Expanded>
        </Expression>
        <OverallResults successes="0" failures="1"/>
      </Section>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./mixed/Misc/loops">
MiscTests.cpp" line="111">
        <Original>
          ( fib[i] % 2 ) == 0
        </Original>
        <Expanded>
          1 == 0
        </Expanded>
      </Expression>
MiscTests.cpp" line="111">
        <Original>
          ( fib[i] % 2 ) == 0
        </Original>
        <Expanded>
          1 == 0
        </Expanded>
      </Expression>
MiscTests.cpp" line="111">
        <Original>
          ( fib[i] % 2 ) == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
MiscTests.cpp" line="111">
        <Original>
          ( fib[i] % 2 ) == 0
        </Original>
        <Expanded>
          1 == 0
        </Expanded>
      </Expression>
MiscTests.cpp" line="111">
        <Original>
          ( fib[i] % 2 ) == 0
        </Original>
        <Expanded>
          1 == 0
        </Expanded>
      </Expression>
MiscTests.cpp" line="111">
        <Original>
          ( fib[i] % 2 ) == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
MiscTests.cpp" line="111">
        <Original>
          ( fib[i] % 2 ) == 0
        </Original>
        <Expanded>
          1 == 0
        </Expanded>
      </Expression>
MiscTests.cpp" line="111">
        <Original>
          ( fib[i] % 2 ) == 0
        </Original>
        <Expanded>
          1 == 0
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/Misc/stdout,stderr">
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/Misc/null strings">
MiscTests.cpp" line="129">
        <Original>
          makeString( false ) != static_cast&lt;char*>(__null)
        </Original>
        <Expanded>
          &quot;valid string&quot; != {null string}
        </Expanded>
      </Expression>
MiscTests.cpp" line="130">
        <Original>
          makeString( true ) == static_cast&lt;char*>(__null)
        </Original>
        <Expanded>
          {null string} == {null string}
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/info">
MiscTests.cpp" line="138">
        <Original>
          false
        </Original>
        <Expanded>
          false
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/checkedif">
MiscTests.cpp" line="143">
        <Original>
          flag
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
MiscTests.cpp" line="151">
        <Original>
          testCheckedIf( true )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/checkedif">
MiscTests.cpp" line="143">
        <Original>
          flag
        </Original>
        <Expanded>
          false
        </Expanded>
      </Expression>
MiscTests.cpp" line="156">
        <Original>
          testCheckedIf( false )
        </Original>
        <Expanded>
          false
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/checkedelse">
MiscTests.cpp" line="161">
        <Original>
          flag
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
MiscTests.cpp" line="169">
        <Original>
          testCheckedElse( true )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/checkedelse">
MiscTests.cpp" line="161">
        <Original>
          flag
        </Original>
        <Expanded>
          false
        </Expanded>
      </Expression>
MiscTests.cpp" line="174">
        <Original>
          testCheckedElse( false )
        </Original>
        <Expanded>
          false
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./misc/xmlentitycheck">
      <Section name="embedded xml" description="&lt;test>it should be possible to embed xml characters, such as &lt;, &quot; or &amp;, or even whole &lt;xml>documents&lt;/xml> within an attribute&lt;/test>">
        <OverallResults successes="0" failures="1"/>
      </Section>
      <Section name="encoded chars" description="these should all be encoded: &amp;&amp;&amp;&quot;&quot;&quot;&lt;&lt;&lt;&amp;&quot;&lt;&lt;&amp;&quot;">
        <OverallResults successes="0" failures="1"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./manual/onechar">
MiscTests.cpp" line="192">
        <Original>
          false
        </Original>
        <Expanded>
          false
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/atomic if">
MiscTests.cpp" line="202">
        <Original>
          x == 0
        </Original>
        <Expanded>
          0 == 0
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/matchers">
MiscTests.cpp" line="212">
        <Original>
          testStringForMatching() Contains( &quot;string&quot; )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; contains: &quot;string&quot;
        </Expanded>
      </Expression>
MiscTests.cpp" line="213">
        <Original>
          testStringForMatching() Contains( &quot;abc&quot; )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; contains: &quot;abc&quot;
        </Expanded>
      </Expression>
MiscTests.cpp" line="215">
        <Original>
          testStringForMatching() StartsWith( &quot;this&quot; )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; starts with: &quot;this&quot;
        </Expanded>
      </Expression>
MiscTests.cpp" line="216">
        <Original>
          testStringForMatching() EndsWith( &quot;substring&quot; )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; ends with: &quot;substring&quot;
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/matchers/Contains">
MiscTests.cpp" line="221">
        <Original>
          testStringForMatching() Contains( &quot;not there&quot; )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; contains: &quot;not there&quot;
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/matchers/StartsWith">
MiscTests.cpp" line="226">
        <Original>
          testStringForMatching() StartsWith( &quot;string&quot; )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; starts with: &quot;string&quot;
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/matchers/EndsWith">
MiscTests.cpp" line="231">
        <Original>
          testStringForMatching() EndsWith( &quot;this&quot; )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; ends with: &quot;this&quot;
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/matchers/Equals">
MiscTests.cpp" line="236">
        <Original>
          testStringForMatching() Equals( &quot;something else&quot; )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; equals: &quot;something else&quot;
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/matchers/AllOf">
MiscTests.cpp" line="244">
        <Original>
          testStringForMatching() AllOf( Catch::Contains( &quot;string&quot; ), Catch::Contains( &quot;abc&quot; ) )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; ( contains: &quot;string&quot; and contains: &quot;abc&quot; )
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/matchers/AnyOf">
MiscTests.cpp" line="248">
        <Original>
          testStringForMatching() AnyOf( Catch::Contains( &quot;string&quot; ), Catch::Contains( &quot;not there&quot; ) )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; ( contains: &quot;string&quot; or contains: &quot;not there&quot; )
        </Expanded>
      </Expression>
MiscTests.cpp" line="249">
        <Original>
          testStringForMatching() AnyOf( Catch::Contains( &quot;not there&quot; ), Catch::Contains( &quot;string&quot; ) )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; ( contains: &quot;not there&quot; or contains: &quot;string&quot; )
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/matchers/Equals">
MiscTests.cpp" line="254">
        <Original>
          testStringForMatching() Equals( &quot;this string contains 'abc' as a substring&quot; )
        </Original>
        <Expanded>
          &quot;this string contains 'abc' as a substring&quot; equals: &quot;this string contains 'abc' as a substring&quot;
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="example/factorial">
MiscTests.cpp" line="265">
        <Original>
          Factorial(0) == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
MiscTests.cpp" line="266">
        <Original>
          Factorial(1) == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
MiscTests.cpp" line="267">
        <Original>
          Factorial(2) == 2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
MiscTests.cpp" line="268">
        <Original>
          Factorial(3) == 6
        </Original>
        <Expanded>
          6 == 6
        </Expanded>
      </Expression>
MiscTests.cpp" line="269">
        <Original>
          Factorial(10) == 3628800
        </Original>
        <Expanded>
          0x<hex digits> == 3628800
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="empty">
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Nice descriptive name">
      <Warning>
        This one ran
      </Warning>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="first tag">
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="second tag">
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="selftest/main">
      <Section name="selftest/expected result" description="Tests do what they claim">
        <Section name="selftest/expected result/failing tests" description="Tests in the 'failing' branch fail">
          <OverallResults successes="26" failures="0"/>
        </Section>
        <OverallResults successes="26" failures="0"/>
      </Section>
      <Section name="selftest/expected result" description="Tests do what they claim">
        <Section name="selftest/expected result/succeeding tests" description="Tests in the 'succeeding' branch succeed">
          <OverallResults successes="46" failures="0"/>
        </Section>
        <OverallResults successes="46" failures="0"/>
      </Section>
      <Section name="selftest/expected result" description="Tests do what they claim">
        <OverallResults successes="0" failures="0"/>
      </Section>
      <Section name="selftest/test counts" description="Number of test cases that run is fixed">
        <Section name="selftest/test counts/succeeding tests" description="Number of 'succeeding' tests is fixed">
TestMain.cpp" line="40">
            <Original>
              totals.assertions.passed == 296
            </Original>
            <Expanded>
              296 == 296
            </Expanded>
          </Expression>
TestMain.cpp" line="41">
            <Original>
              totals.assertions.failed == 0
            </Original>
            <Expanded>
              0 == 0
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="selftest/test counts" description="Number of test cases that run is fixed">
        <Section name="selftest/test counts/failing tests" description="Number of 'failing' tests is fixed">
TestMain.cpp" line="47">
            <Original>
              totals.assertions.passed == 1
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
TestMain.cpp" line="48">
            <Original>
              totals.assertions.failed == 73
            </Original>
            <Expanded>
              73 == 73
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="meta/Misc/Sections">
TestMain.cpp" line="57">
        <Original>
          totals.assertions.passed == 2
        </Original>
        <Expanded>
          2 == 2
        </Expanded>
      </Expression>
TestMain.cpp" line="58">
        <Original>
          totals.assertions.failed == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="selftest/parser/2">
      <Section name="default">
TestMain.cpp" line="97">
          <Original>
            parseIntoConfig( argv, config )
          </Original>
          <Expanded>
            parseIntoConfig( argv, config )
          </Expanded>
        </Expression>
TestMain.cpp" line="99">
          <Original>
            config.shouldDebugBreak == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
TestMain.cpp" line="100">
          <Original>
            config.cutoff == -1
          </Original>
          <Expanded>
            -1 == -1
          </Expanded>
        </Expression>
TestMain.cpp" line="101">
          <Original>
            config.allowThrows == true
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
TestMain.cpp" line="102">
          <Original>
            config.reporter.empty()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="5" failures="0"/>
      </Section>
      <Section name="test lists">
        <Section name="-t/1" description="Specify one test case using -t">
TestMain.cpp" line="108">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="110">
            <Original>
              config.filters.size() == 1
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
TestMain.cpp" line="111">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;notIncluded&quot; ) ) == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
TestMain.cpp" line="112">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;test1&quot; ) )
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="4" failures="0"/>
        </Section>
        <OverallResults successes="4" failures="0"/>
      </Section>
      <Section name="test lists">
        <Section name="-t/exclude:1" description="Specify one test case exclusion using -t exclude:">
TestMain.cpp" line="116">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="118">
            <Original>
              config.filters.size() == 1
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
TestMain.cpp" line="119">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;test1&quot; ) ) == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
TestMain.cpp" line="120">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;alwaysIncluded&quot; ) )
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="4" failures="0"/>
        </Section>
        <OverallResults successes="4" failures="0"/>
      </Section>
      <Section name="test lists">
        <Section name="--test/1" description="Specify one test case using --test">
TestMain.cpp" line="125">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="127">
            <Original>
              config.filters.size() == 1
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
TestMain.cpp" line="128">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;notIncluded&quot; ) ) == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
TestMain.cpp" line="129">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;test1&quot; ) )
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="4" failures="0"/>
        </Section>
        <OverallResults successes="4" failures="0"/>
      </Section>
      <Section name="test lists">
        <Section name="--test/exclude:1" description="Specify one test case exclusion using --test exclude:">
TestMain.cpp" line="134">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="136">
            <Original>
              config.filters.size() == 1
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
TestMain.cpp" line="137">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;test1&quot; ) ) == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
TestMain.cpp" line="138">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;alwaysIncluded&quot; ) )
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="4" failures="0"/>
        </Section>
        <OverallResults successes="4" failures="0"/>
      </Section>
      <Section name="test lists">
        <Section name="--test/exclude:2" description="Specify one test case exclusion using --test ~">
TestMain.cpp" line="143">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="145">
            <Original>
              config.filters.size() == 1
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
TestMain.cpp" line="146">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;test1&quot; ) ) == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
TestMain.cpp" line="147">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;alwaysIncluded&quot; ) )
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="4" failures="0"/>
        </Section>
        <OverallResults successes="4" failures="0"/>
      </Section>
      <Section name="test lists">
        <Section name="-t/2" description="Specify two test cases using -t">
TestMain.cpp" line="152">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="154">
            <Original>
              config.filters.size() == 1
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
TestMain.cpp" line="155">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;notIncluded&quot; ) ) == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
TestMain.cpp" line="156">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;test1&quot; ) )
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
TestMain.cpp" line="157">
            <Original>
              config.filters[0].shouldInclude( fakeTestCase( &quot;test2&quot; ) )
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="5" failures="0"/>
        </Section>
        <OverallResults successes="5" failures="0"/>
      </Section>
      <Section name="test lists">
        <Section name="-t/0" description="When no test names are supplied it is an error">
TestMain.cpp" line="162">
            <Original>
              parseIntoConfigAndReturnError( argv, config ) Contains( &quot;at least 1&quot; )
            </Original>
            <Expanded>
              &quot;Error while parsing arguments. Expected at least 1 argument.&quot; contains: &quot;at least 1&quot;
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0"/>
        </Section>
        <OverallResults successes="1" failures="0"/>
      </Section>
      <Section name="test lists">
        <OverallResults successes="0" failures="0"/>
      </Section>
      <Section name="reporter">
        <Section name="-r/console">
TestMain.cpp" line="169">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="171">
            <Original>
              config.reporter == &quot;console&quot;
            </Original>
            <Expanded>
              &quot;console&quot; == &quot;console&quot;
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="reporter">
        <Section name="-r/xml">
TestMain.cpp" line="175">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="177">
            <Original>
              config.reporter == &quot;xml&quot;
            </Original>
            <Expanded>
              &quot;xml&quot; == &quot;xml&quot;
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="reporter">
        <Section name="--reporter/junit">
TestMain.cpp" line="181">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="183">
            <Original>
              config.reporter == &quot;junit&quot;
            </Original>
            <Expanded>
              &quot;junit&quot; == &quot;junit&quot;
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="reporter">
        <Section name="-r/error" description="reporter config only accepts one argument">
TestMain.cpp" line="187">
            <Original>
              parseIntoConfigAndReturnError( argv, config ) Contains( &quot;1 argument&quot; )
            </Original>
            <Expanded>
              &quot;Error while parsing arguments. Expected 1 argument. Arguments were: one two&quot; contains: &quot;1 argument&quot;
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0"/>
        </Section>
        <OverallResults successes="1" failures="0"/>
      </Section>
      <Section name="reporter">
        <OverallResults successes="0" failures="0"/>
      </Section>
      <Section name="debugger">
        <Section name="-b">
TestMain.cpp" line="194">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="196">
            <Original>
              config.shouldDebugBreak == true
            </Original>
            <Expanded>
              true == true
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="debugger">
        <Section name="--break">
TestMain.cpp" line="200">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="202">
            <Original>
              config.shouldDebugBreak
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="debugger">
        <Section name="-b" description="break option has no arguments">
TestMain.cpp" line="206">
            <Original>
              parseIntoConfigAndReturnError( argv, config ) Contains( &quot;0 arguments&quot; )
            </Original>
            <Expanded>
              &quot;Error while parsing arguments. Expected 0 arguments. Arguments were: unexpected&quot; contains: &quot;0 arguments&quot;
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0"/>
        </Section>
        <OverallResults successes="1" failures="0"/>
      </Section>
      <Section name="debugger">
        <OverallResults successes="0" failures="0"/>
      </Section>
      <Section name="abort">
        <Section name="-a">
TestMain.cpp" line="213">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="215">
            <Original>
              config.cutoff == 1
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="abort">
        <Section name="-a/2">
TestMain.cpp" line="219">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="221">
            <Original>
              config.cutoff == 2
            </Original>
            <Expanded>
              2 == 2
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="abort">
        <Section name="-a/error/0">
TestMain.cpp" line="225">
            <Original>
              parseIntoConfigAndReturnError( argv, config ) Contains( &quot;greater than zero&quot; )
            </Original>
            <Expanded>
              &quot;Error while parsing arguments. threshold must be a number greater than zero. Arguments were: 0&quot; contains: &quot;greater than zero&quot;
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0"/>
        </Section>
        <OverallResults successes="1" failures="0"/>
      </Section>
      <Section name="abort">
        <Section name="-a/error/non numeric">
TestMain.cpp" line="229">
            <Original>
              parseIntoConfigAndReturnError( argv, config ) Contains( &quot;greater than zero&quot; )
            </Original>
            <Expanded>
              &quot;Error while parsing arguments. threshold must be a number greater than zero. Arguments were: oops&quot; contains: &quot;greater than zero&quot;
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0"/>
        </Section>
        <OverallResults successes="1" failures="0"/>
      </Section>
      <Section name="abort">
        <Section name="-a/error/two args" description="cutoff only takes one argument">
TestMain.cpp" line="233">
            <Original>
              parseIntoConfigAndReturnError( argv, config ) Contains( &quot;0 and 1 argument&quot; )
            </Original>
            <Expanded>
              &quot;Error while parsing arguments. Expected between 0 and 1 argument. Arguments were: 1 2&quot; contains: &quot;0 and 1 argument&quot;
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0"/>
        </Section>
        <OverallResults successes="1" failures="0"/>
      </Section>
      <Section name="abort">
        <OverallResults successes="0" failures="0"/>
      </Section>
      <Section name="nothrow">
        <Section name="-nt">
TestMain.cpp" line="240">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="242">
            <Original>
              config.allowThrows == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="nothrow">
        <Section name="--nothrow">
TestMain.cpp" line="246">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="248">
            <Original>
              config.allowThrows == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="nothrow">
        <OverallResults successes="0" failures="0"/>
      </Section>
      <Section name="streams">
        <Section name="-o filename">
TestMain.cpp" line="255">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="257">
            <Original>
              config.outputFilename == &quot;filename.ext&quot;
            </Original>
            <Expanded>
              &quot;filename.ext&quot; == &quot;filename.ext&quot;
            </Expanded>
          </Expression>
TestMain.cpp" line="258">
            <Original>
              config.stream.empty()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="3" failures="0"/>
        </Section>
        <OverallResults successes="3" failures="0"/>
      </Section>
      <Section name="streams">
        <Section name="-o %stdout">
TestMain.cpp" line="262">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="264">
            <Original>
              config.stream == &quot;stdout&quot;
            </Original>
            <Expanded>
              &quot;stdout&quot; == &quot;stdout&quot;
            </Expanded>
          </Expression>
TestMain.cpp" line="265">
            <Original>
              config.outputFilename.empty()
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="3" failures="0"/>
        </Section>
        <OverallResults successes="3" failures="0"/>
      </Section>
      <Section name="streams">
        <Section name="--out">
TestMain.cpp" line="269">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="271">
            <Original>
              config.outputFilename == &quot;filename.ext&quot;
            </Original>
            <Expanded>
              &quot;filename.ext&quot; == &quot;filename.ext&quot;
            </Expanded>
          </Expression>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="streams">
        <OverallResults successes="0" failures="0"/>
      </Section>
      <Section name="combinations">
        <Section name="-a -b">
TestMain.cpp" line="278">
            <Original>
              parseIntoConfig( argv, config )
            </Original>
            <Expanded>
              parseIntoConfig( argv, config )
            </Expanded>
          </Expression>
TestMain.cpp" line="280">
            <Original>
              config.cutoff == 1
            </Original>
            <Expanded>
              1 == 1
            </Expanded>
          </Expression>
TestMain.cpp" line="281">
            <Original>
              config.shouldDebugBreak
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
TestMain.cpp" line="282">
            <Original>
              config.allowThrows == false
            </Original>
            <Expanded>
              false == false
            </Expanded>
          </Expression>
          <OverallResults successes="4" failures="0"/>
        </Section>
        <OverallResults successes="4" failures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="selftest/test filter">
TestMain.cpp" line="291">
        <Original>
          matchAny.shouldInclude( fakeTestCase( &quot;any&quot; ) )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
TestMain.cpp" line="292">
        <Original>
          matchNone.shouldInclude( fakeTestCase( &quot;any&quot; ) ) == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
TestMain.cpp" line="297">
        <Original>
          matchHidden.shouldInclude( fakeTestCase( &quot;any&quot; ) ) == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
TestMain.cpp" line="298">
        <Original>
          matchNonHidden.shouldInclude( fakeTestCase( &quot;any&quot; ) )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
TestMain.cpp" line="300">
        <Original>
          matchHidden.shouldInclude( fakeTestCase( &quot;./any&quot; ) )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
TestMain.cpp" line="301">
        <Original>
          matchNonHidden.shouldInclude( fakeTestCase( &quot;./any&quot; ) ) == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="selftest/test filters">
TestMain.cpp" line="312">
        <Original>
          matchHidden.shouldInclude( fakeTestCase( &quot;./something&quot; ) )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
TestMain.cpp" line="314">
        <Original>
          filters.shouldInclude( fakeTestCase( &quot;any&quot; ) ) == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
TestMain.cpp" line="315">
        <Original>
          filters.shouldInclude( fakeTestCase( &quot;./something&quot; ) )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
TestMain.cpp" line="316">
        <Original>
          filters.shouldInclude( fakeTestCase( &quot;./anything&quot; ) ) == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="selftest/filter/prefix wildcard">
TestMain.cpp" line="322">
        <Original>
          matchBadgers.shouldInclude( fakeTestCase( &quot;big badger&quot; ) )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
TestMain.cpp" line="323">
        <Original>
          matchBadgers.shouldInclude( fakeTestCase( &quot;little badgers&quot; ) ) == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="selftest/filter/wildcard at both ends">
TestMain.cpp" line="328">
        <Original>
          matchBadgers.shouldInclude( fakeTestCase( &quot;big badger&quot; ) )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
TestMain.cpp" line="329">
        <Original>
          matchBadgers.shouldInclude( fakeTestCase( &quot;little badgers&quot; ) )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
TestMain.cpp" line="330">
        <Original>
          matchBadgers.shouldInclude( fakeTestCase( &quot;badgers are big&quot; ) )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
TestMain.cpp" line="331">
        <Original>
          matchBadgers.shouldInclude( fakeTestCase( &quot;hedgehogs&quot; ) ) == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="selftest/option parsers">
TestMain.cpp" line="351">
        <Original>
          opt.parseIntoConfig( parser, config )
        </Original>
        <Expanded>
          opt.parseIntoConfig( parser, config )
        </Expanded>
      </Expression>
TestMain.cpp" line="353">
        <Original>
          config.filters.size() == 1
        </Original>
        <Expanded>
          1 == 1
        </Expanded>
      </Expression>
TestMain.cpp" line="354">
        <Original>
          config.filters[0].shouldInclude( fakeTestCase( &quot;notIncluded&quot; ) ) == false
        </Original>
        <Expanded>
          false == false
        </Expanded>
      </Expression>
TestMain.cpp" line="355">
        <Original>
          config.filters[0].shouldInclude( fakeTestCase( &quot;test1&quot; ) )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="selftest/tags">
      <Section name="one tag">
TestMain.cpp" line="369">
          <Original>
            oneTag.getTestCaseInfo().description == &quot;&quot;
          </Original>
          <Expanded>
            &quot;&quot; == &quot;&quot;
          </Expanded>
        </Expression>
TestMain.cpp" line="370">
          <Original>
            oneTag.hasTag( &quot;one&quot; )
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
TestMain.cpp" line="371">
          <Original>
            oneTag.getTags().size() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
TestMain.cpp" line="373">
          <Original>
            oneTag.matchesTags( p1 ) == true
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
TestMain.cpp" line="374">
          <Original>
            oneTag.matchesTags( p2 ) == true
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
TestMain.cpp" line="375">
          <Original>
            oneTag.matchesTags( p3 ) == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
TestMain.cpp" line="376">
          <Original>
            oneTag.matchesTags( p4 ) == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
TestMain.cpp" line="377">
          <Original>
            oneTag.matchesTags( p5 ) == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <OverallResults successes="8" failures="0"/>
      </Section>
      <Section name="two tags">
TestMain.cpp" line="383">
          <Original>
            twoTags.getTestCaseInfo().description == &quot;&quot;
          </Original>
          <Expanded>
            &quot;&quot; == &quot;&quot;
          </Expanded>
        </Expression>
TestMain.cpp" line="384">
          <Original>
            twoTags.hasTag( &quot;one&quot; )
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
TestMain.cpp" line="385">
          <Original>
            twoTags.hasTag( &quot;two&quot; )
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
TestMain.cpp" line="386">
          <Original>
            twoTags.hasTag( &quot;three&quot; ) == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
TestMain.cpp" line="387">
          <Original>
            twoTags.getTags().size() == 2
          </Original>
          <Expanded>
            2 == 2
          </Expanded>
        </Expression>
TestMain.cpp" line="389">
          <Original>
            twoTags.matchesTags( p1 ) == true
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
TestMain.cpp" line="390">
          <Original>
            twoTags.matchesTags( p2 ) == true
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
TestMain.cpp" line="391">
          <Original>
            twoTags.matchesTags( p3 ) == true
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
TestMain.cpp" line="392">
          <Original>
            twoTags.matchesTags( p4 ) == true
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
TestMain.cpp" line="393">
          <Original>
            twoTags.matchesTags( p5 ) == true
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
        <OverallResults successes="10" failures="0"/>
      </Section>
      <Section name="one tag with characters either side">
TestMain.cpp" line="399">
          <Original>
            oneTagWithExtras.getTestCaseInfo().description == &quot;1234&quot;
          </Original>
          <Expanded>
            &quot;1234&quot; == &quot;1234&quot;
          </Expanded>
        </Expression>
TestMain.cpp" line="400">
          <Original>
            oneTagWithExtras.hasTag( &quot;one&quot; )
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
TestMain.cpp" line="401">
          <Original>
            oneTagWithExtras.hasTag( &quot;two&quot; ) == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
TestMain.cpp" line="402">
          <Original>
            oneTagWithExtras.getTags().size() == 1
          </Original>
          <Expanded>
            1 == 1
          </Expanded>
        </Expression>
        <OverallResults successes="4" failures="0"/>
      </Section>
      <Section name="start of a tag, but not closed">
TestMain.cpp" line="409">
          <Original>
            oneTagOpen.getTestCaseInfo().description == &quot;[one&quot;
          </Original>
          <Expanded>
            &quot;[one&quot; == &quot;[one&quot;
          </Expanded>
        </Expression>
TestMain.cpp" line="410">
          <Original>
            oneTagOpen.hasTag( &quot;one&quot; ) == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
TestMain.cpp" line="411">
          <Original>
            oneTagOpen.getTags().size() == 0
          </Original>
          <Expanded>
            0 == 0
          </Expanded>
        </Expression>
        <OverallResults successes="3" failures="0"/>
      </Section>
      <Section name="hidden">
TestMain.cpp" line="417">
          <Original>
            oneTag.getTestCaseInfo().description == &quot;&quot;
          </Original>
          <Expanded>
            &quot;&quot; == &quot;&quot;
          </Expanded>
        </Expression>
TestMain.cpp" line="418">
          <Original>
            oneTag.hasTag( &quot;hide&quot; )
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
TestMain.cpp" line="419">
          <Original>
            oneTag.isHidden()
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
TestMain.cpp" line="421">
          <Original>
            oneTag.matchesTags( &quot;~[hide]&quot; ) == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <OverallResults successes="4" failures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/Tricky/std::pair">
TrickyTests.cpp" line="37">
        <Original>
          (std::pair&lt;int, int>( 1, 2 )) == aNicePair
        </Original>
        <Expanded>
          std::pair( 1, 2 ) == std::pair( 1, 2 )
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./inprogress/failing/Tricky/trailing expression">
      <Warning>
        Uncomment the code in this test to check that it gives a sensible compiler error
      </Warning>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./inprogress/failing/Tricky/compound lhs">
      <Warning>
        Uncomment the code in this test to check that it gives a sensible compiler error
      </Warning>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./failing/Tricky/non streamable type">
TrickyTests.cpp" line="95">
        <Original>
          &amp;o1 == &amp;o2
        </Original>
        <Expanded>
          0x<hex digits> == 0x<hex digits>
        </Expanded>
      </Expression>
TrickyTests.cpp" line="96">
        <Original>
          o1 == o2
        </Original>
        <Expanded>
          {?} == {?}
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./failing/string literals">
TrickyTests.cpp" line="106">
        <Original>
          std::string( &quot;first&quot; ) == &quot;second&quot;
        </Original>
        <Expanded>
          &quot;first&quot; == &quot;second&quot;
        </Expanded>
      </Expression>
      <OverallResult success="false"/>
    </TestCase>
    <TestCase name="./succeeding/side-effects">
TrickyTests.cpp" line="119">
        <Original>
          i++ == 7
        </Original>
        <Expanded>
          7 == 7
        </Expanded>
      </Expression>
TrickyTests.cpp" line="120">
        <Original>
          i++ == 8
        </Original>
        <Expanded>
          8 == 8
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/koenig">
TrickyTests.cpp" line="186">
        <Original>
          0x<hex digits> == o
        </Original>
        <Expanded>
          0x<hex digits> == {?}
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/non-const==">
TrickyTests.cpp" line="212">
        <Original>
          t == 1u
        </Original>
        <Expanded>
          {?} == 1
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/enum/bits">
TrickyTests.cpp" line="224">
        <Original>
          0x<hex digits> == bit30and31
        </Original>
        <Expanded>
          0x<hex digits> == 3221225472
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/boolean member">
TrickyTests.cpp" line="239">
        <Original>
          obj.prop != __null
        </Original>
        <Expanded>
          0x<hex digits> != 0
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/unimplemented static bool">
      <Section name="compare to true">
TrickyTests.cpp" line="259">
          <Original>
            is_true&lt;true>::value == true
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
TrickyTests.cpp" line="260">
          <Original>
            true == is_true&lt;true>::value
          </Original>
          <Expanded>
            true == true
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="compare to false">
TrickyTests.cpp" line="264">
          <Original>
            is_true&lt;false>::value == false
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
TrickyTests.cpp" line="265">
          <Original>
            false == is_true&lt;false>::value
          </Original>
          <Expanded>
            false == false
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <Section name="negation">
TrickyTests.cpp" line="270">
          <Original>
            !is_true&lt;false>::value
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0"/>
      </Section>
      <Section name="double negation">
TrickyTests.cpp" line="275">
          <Original>
            !!is_true&lt;true>::value
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <OverallResults successes="1" failures="0"/>
      </Section>
      <Section name="direct">
TrickyTests.cpp" line="280">
          <Original>
            is_true&lt;true>::value
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
TrickyTests.cpp" line="281">
          <Original>
            !is_true&lt;false>::value
          </Original>
          <Expanded>
            !false
          </Expanded>
        </Expression>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="./succeeding/SafeBool">
TrickyTests.cpp" line="313">
        <Original>
          True
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
TrickyTests.cpp" line="314">
        <Original>
          !False
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
TrickyTests.cpp" line="315">
        <Original>
          !False
        </Original>
        <Expanded>
          !false
        </Expanded>
      </Expression>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Assertions then sections">
TrickyTests.cpp" line="323">
        <Original>
          Catch::isTrue( true )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Section name="A section">
TrickyTests.cpp" line="327">
          <Original>
            Catch::isTrue( true )
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Section name="Another section">
TrickyTests.cpp" line="331">
            <Original>
              Catch::isTrue( true )
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
TrickyTests.cpp" line="323">
        <Original>
          Catch::isTrue( true )
        </Original>
        <Expanded>
          true
        </Expanded>
      </Expression>
      <Section name="A section">
TrickyTests.cpp" line="327">
          <Original>
            Catch::isTrue( true )
          </Original>
          <Expanded>
            true
          </Expanded>
        </Expression>
        <Section name="Another other section">
TrickyTests.cpp" line="335">
            <Original>
              Catch::isTrue( true )
            </Original>
            <Expanded>
              true
            </Expanded>
          </Expression>
          <OverallResults successes="1" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: Do that thing with the thing">
      <Section name="Given: This stuff exists">
        <Section name=" When: I do this">
          <Section name=" Then: it should do this">
BDDTests.cpp" line="21">
              <Original>
                itDoesThis()
              </Original>
              <Expanded>
                true
              </Expanded>
            </Expression>
            <Section name="  And: do that">
BDDTests.cpp" line="23">
                <Original>
                  itDoesThat()
                </Original>
                <Expanded>
                  true
                </Expanded>
              </Expression>
              <OverallResults successes="1" failures="0"/>
            </Section>
            <OverallResults successes="2" failures="0"/>
          </Section>
          <OverallResults successes="2" failures="0"/>
        </Section>
        <OverallResults successes="2" failures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <OverallResults successes="521" failures="104"/>
  </Group>
  <OverallResults successes="521" failures="104"/>
</Catch>
[Started testing: CatchSelfTest]
[Started group: '~dummy']

[Running: ./succeeding/Approx/simple]
ApproxTests.cpp:20: d == Approx( 1.23 ) succeeded for: 1.23 == Approx( 1.23 )
ApproxTests.cpp:21: d != Approx( 1.22 ) succeeded for: 1.23 != Approx( 1.22 )
ApproxTests.cpp:22: d != Approx( 1.24 ) succeeded for: 1.23 != Approx( 1.24 )
ApproxTests.cpp:24: Approx( d ) == 1.23 succeeded for: Approx( 1.23 ) == 1.23
ApproxTests.cpp:25: Approx( d ) != 1.22 succeeded for: Approx( 1.23 ) != 1.22
ApproxTests.cpp:26: Approx( d ) != 1.24 succeeded for: Approx( 1.23 ) != 1.24
[Finished: './succeeding/Approx/simple' All tests passed (6 assertions in 1 test case)]

[Running: ./succeeding/Approx/epsilon]
ApproxTests.cpp:38: d != Approx( 1.231 ) succeeded for: 1.23 != Approx( 1.231 )
ApproxTests.cpp:39: d == Approx( 1.231 ).epsilon( 0.1 ) succeeded for: 1.23 == Approx( 1.231 )
[Finished: './succeeding/Approx/epsilon' All tests passed (2 assertions in 1 test case)]

[Running: ./succeeding/Approx/float]
ApproxTests.cpp:49: 1.23f == Approx( 1.23f ) succeeded for: 1.23 == Approx( 1.23 )
ApproxTests.cpp:50: 0.0f == Approx( 0.0f ) succeeded for: 0 == Approx( 0 )
[Finished: './succeeding/Approx/float' All tests passed (2 assertions in 1 test case)]

[Running: ./succeeding/Approx/int]
ApproxTests.cpp:60: 1 == Approx( 1 ) succeeded
ApproxTests.cpp:61: 0 == Approx( 0 ) succeeded
[Finished: './succeeding/Approx/int' All tests passed (2 assertions in 1 test case)]

[Running: ./succeeding/Approx/mixed]
ApproxTests.cpp:75: 1.0f == Approx( 1 ) succeeded for: 1 == Approx( 1 )
ApproxTests.cpp:76: 0 == Approx( dZero) succeeded for: 0 == Approx( 0 )
ApproxTests.cpp:77: 0 == Approx( dSmall ).epsilon( 0.001 ) succeeded for: 0 == Approx( 1e-05 )
ApproxTests.cpp:78: 1.234f == Approx( dMedium ) succeeded for: 1.234 == Approx( 1.234 )
ApproxTests.cpp:79: dMedium == Approx( 1.234f ) succeeded for: 1.234 == Approx( 1.234 )
[Finished: './succeeding/Approx/mixed' All tests passed (5 assertions in 1 test case)]

[Running: ./succeeding/Approx/custom]
ApproxTests.cpp:93: d == approx( 1.23 ) succeeded for: 1.23 == Approx( 1.23 )
ApproxTests.cpp:94: d == approx( 1.22 ) succeeded for: 1.23 == Approx( 1.22 )
ApproxTests.cpp:95: d == approx( 1.24 ) succeeded for: 1.23 == Approx( 1.24 )
ApproxTests.cpp:96: d != approx( 1.25 ) succeeded for: 1.23 != Approx( 1.25 )
ApproxTests.cpp:98: approx( d ) == 1.23 succeeded for: Approx( 1.23 ) == 1.23
ApproxTests.cpp:99: approx( d ) == 1.22 succeeded for: Approx( 1.23 ) == 1.22
ApproxTests.cpp:100: approx( d ) == 1.24 succeeded for: Approx( 1.23 ) == 1.24
ApproxTests.cpp:101: approx( d ) != 1.25 succeeded for: Approx( 1.23 ) != 1.25
[Finished: './succeeding/Approx/custom' All tests passed (8 assertions in 1 test case)]

[Running: Approximate PI]
ApproxTests.cpp:110: divide( 22, 7 ) == Approx( 3.141 ).epsilon( 0.001 ) succeeded for: 3.142857142857143 == Approx( 3.141 )
ApproxTests.cpp:111: divide( 22, 7 ) != Approx( 3.141 ).epsilon( 0.0001 ) succeeded for: 3.142857142857143 != Approx( 3.141 )
[Finished: 'Approximate PI' All tests passed (2 assertions in 1 test case)]

[Running: ./succeeding/TestClass/succeedingCase]
ClassTests.cpp:24: s == "hello" succeeded for: "hello" == "hello"
[Finished: './succeeding/TestClass/succeedingCase' All tests passed (1 assertion in 1 test case)]

[Running: ./failing/TestClass/failingCase]
ClassTests.cpp:28: s == "world" failed for: "hello" == "world"
[Finished: './failing/TestClass/failingCase' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/Fixture/succeedingCase]
ClassTests.cpp:47: m_a == 1 succeeded for: 1 == 1
[Finished: './succeeding/Fixture/succeedingCase' All tests passed (1 assertion in 1 test case)]

[Running: ./failing/Fixture/failingCase]
ClassTests.cpp:55: m_a == 2 failed for: 1 == 2
[Finished: './failing/Fixture/failingCase' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/conditions/equality]
ConditionTests.cpp:55: data.int_seven == 7 succeeded for: 7 == 7
ConditionTests.cpp:56: data.float_nine_point_one == Approx( 9.1f ) succeeded for: 9.1 == Approx( 9.1 )
ConditionTests.cpp:57: data.double_pi == Approx( 3.1415926535 ) succeeded for: 3.1415926535 == Approx( 3.14159 )
ConditionTests.cpp:58: data.str_hello == "hello" succeeded for: "hello" == "hello"
ConditionTests.cpp:59: "hello" == data.str_hello succeeded for: "hello" == "hello"
ConditionTests.cpp:60: data.str_hello.size() == 5 succeeded for: 5 == 5
ConditionTests.cpp:63: x == Approx( 1.3 ) succeeded for: 1.3 == Approx( 1.3 )
[Finished: './succeeding/conditions/equality' All tests passed (7 assertions in 1 test case)]

[Running: ./failing/conditions/equality]
ConditionTests.cpp:71: data.int_seven == 6 failed for: 7 == 6
ConditionTests.cpp:72: data.int_seven == 8 failed for: 7 == 8
ConditionTests.cpp:73: data.int_seven == 0 failed for: 7 == 0
ConditionTests.cpp:74: data.float_nine_point_one == Approx( 9.11f ) failed for: 9.1 == Approx( 9.11 )
ConditionTests.cpp:75: data.float_nine_point_one == Approx( 9.0f ) failed for: 9.1 == Approx( 9 )
ConditionTests.cpp:76: data.float_nine_point_one == Approx( 1 ) failed for: 9.1 == Approx( 1 )
ConditionTests.cpp:77: data.float_nine_point_one == Approx( 0 ) failed for: 9.1 == Approx( 0 )
ConditionTests.cpp:78: data.double_pi == Approx( 3.1415 ) failed for: 3.1415926535 == Approx( 3.1415 )
ConditionTests.cpp:79: data.str_hello == "goodbye" failed for: "hello" == "goodbye"
ConditionTests.cpp:80: data.str_hello == "hell" failed for: "hello" == "hell"
ConditionTests.cpp:81: data.str_hello == "hello1" failed for: "hello" == "hello1"
ConditionTests.cpp:82: data.str_hello.size() == 6 failed for: 5 == 6
ConditionTests.cpp:85: x == Approx( 1.301 ) failed for: 1.3 == Approx( 1.301 )
[Finished: './failing/conditions/equality' 1 test case failed (All 13 assertions failed)]

[Running: ./succeeding/conditions/inequality]
ConditionTests.cpp:93: data.int_seven != 6 succeeded for: 7 != 6
ConditionTests.cpp:94: data.int_seven != 8 succeeded for: 7 != 8
ConditionTests.cpp:95: data.float_nine_point_one != Approx( 9.11f ) succeeded for: 9.1 != Approx( 9.11 )
ConditionTests.cpp:96: data.float_nine_point_one != Approx( 9.0f ) succeeded for: 9.1 != Approx( 9 )
ConditionTests.cpp:97: data.float_nine_point_one != Approx( 1 ) succeeded for: 9.1 != Approx( 1 )
ConditionTests.cpp:98: data.float_nine_point_one != Approx( 0 ) succeeded for: 9.1 != Approx( 0 )
ConditionTests.cpp:99: data.double_pi != Approx( 3.1415 ) succeeded for: 3.1415926535 != Approx( 3.1415 )
ConditionTests.cpp:100: data.str_hello != "goodbye" succeeded for: "hello" != "goodbye"
ConditionTests.cpp:101: data.str_hello != "hell" succeeded for: "hello" != "hell"
ConditionTests.cpp:102: data.str_hello != "hello1" succeeded for: "hello" != "hello1"
ConditionTests.cpp:103: data.str_hello.size() != 6 succeeded for: 5 != 6
[Finished: './succeeding/conditions/inequality' All tests passed (11 assertions in 1 test case)]

[Running: ./failing/conditions/inequality]
ConditionTests.cpp:111: data.int_seven != 7 failed for: 7 != 7
ConditionTests.cpp:112: data.float_nine_point_one != Approx( 9.1f ) failed for: 9.1 != Approx( 9.1 )
ConditionTests.cpp:113: data.double_pi != Approx( 3.1415926535 ) failed for: 3.1415926535 != Approx( 3.14159 )
ConditionTests.cpp:114: data.str_hello != "hello" failed for: "hello" != "hello"
ConditionTests.cpp:115: data.str_hello.size() != 5 failed for: 5 != 5
[Finished: './failing/conditions/inequality' 1 test case failed (All 5 assertions failed)]

[Running: ./succeeding/conditions/ordered]
ConditionTests.cpp:124: data.int_seven < 8 succeeded for: 7 < 8
ConditionTests.cpp:125: data.int_seven > 6 succeeded for: 7 > 6
ConditionTests.cpp:126: data.int_seven > 0 succeeded for: 7 > 0
ConditionTests.cpp:127: data.int_seven > -1 succeeded for: 7 > -1
ConditionTests.cpp:129: data.int_seven >= 7 succeeded for: 7 >= 7
ConditionTests.cpp:130: data.int_seven >= 6 succeeded for: 7 >= 6
ConditionTests.cpp:131: data.int_seven <= 7 succeeded for: 7 <= 7
ConditionTests.cpp:132: data.int_seven <= 8 succeeded for: 7 <= 8
ConditionTests.cpp:134: data.float_nine_point_one > 9 succeeded for: 9.1 > 9
ConditionTests.cpp:135: data.float_nine_point_one < 10 succeeded for: 9.1 < 10
ConditionTests.cpp:136: data.float_nine_point_one < 9.2 succeeded for: 9.1 < 9.199999999999999
ConditionTests.cpp:138: data.str_hello <= "hello" succeeded for: "hello" <= "hello"
ConditionTests.cpp:139: data.str_hello >= "hello" succeeded for: "hello" >= "hello"
ConditionTests.cpp:141: data.str_hello < "hellp" succeeded for: "hello" < "hellp"
ConditionTests.cpp:142: data.str_hello < "zebra" succeeded for: "hello" < "zebra"
ConditionTests.cpp:143: data.str_hello > "hellm" succeeded for: "hello" > "hellm"
ConditionTests.cpp:144: data.str_hello > "a" succeeded for: "hello" > "a"
[Finished: './succeeding/conditions/ordered' All tests passed (17 assertions in 1 test case)]

[Running: ./failing/conditions/ordered]
ConditionTests.cpp:152: data.int_seven > 7 failed for: 7 > 7
ConditionTests.cpp:153: data.int_seven < 7 failed for: 7 < 7
ConditionTests.cpp:154: data.int_seven > 8 failed for: 7 > 8
ConditionTests.cpp:155: data.int_seven < 6 failed for: 7 < 6
ConditionTests.cpp:156: data.int_seven < 0 failed for: 7 < 0
ConditionTests.cpp:157: data.int_seven < -1 failed for: 7 < -1
ConditionTests.cpp:159: data.int_seven >= 8 failed for: 7 >= 8
ConditionTests.cpp:160: data.int_seven <= 6 failed for: 7 <= 6
ConditionTests.cpp:162: data.float_nine_point_one < 9 failed for: 9.1 < 9
ConditionTests.cpp:163: data.float_nine_point_one > 10 failed for: 9.1 > 10
ConditionTests.cpp:164: data.float_nine_point_one > 9.2 failed for: 9.1 > 9.199999999999999
ConditionTests.cpp:166: data.str_hello > "hello" failed for: "hello" > "hello"
ConditionTests.cpp:167: data.str_hello < "hello" failed for: "hello" < "hello"
ConditionTests.cpp:168: data.str_hello > "hellp" failed for: "hello" > "hellp"
ConditionTests.cpp:169: data.str_hello > "z" failed for: "hello" > "z"
ConditionTests.cpp:170: data.str_hello < "hellm" failed for: "hello" < "hellm"
ConditionTests.cpp:171: data.str_hello < "a" failed for: "hello" < "a"
ConditionTests.cpp:173: data.str_hello >= "z" failed for: "hello" >= "z"
ConditionTests.cpp:174: data.str_hello <= "a" failed for: "hello" <= "a"
[Finished: './failing/conditions/ordered' 1 test case failed (All 19 assertions failed)]

[Running: ./succeeding/conditions/int literals]
ConditionTests.cpp:188: i == 1 succeeded for: 1 == 1
ConditionTests.cpp:189: ui == 2 succeeded for: 2 == 2
ConditionTests.cpp:190: l == 3 succeeded for: 3 == 3
ConditionTests.cpp:191: ul == 4 succeeded for: 4 == 4
ConditionTests.cpp:192: c == 5 succeeded for: 5 == 5
ConditionTests.cpp:193: uc == 6 succeeded for: 6 == 6
ConditionTests.cpp:195: 1 == i succeeded for: 1 == 1
ConditionTests.cpp:196: 2 == ui succeeded for: 2 == 2
ConditionTests.cpp:197: 3 == l succeeded for: 3 == 3
ConditionTests.cpp:198: 4 == ul succeeded for: 4 == 4
ConditionTests.cpp:199: 5 == c succeeded for: 5 == 5
ConditionTests.cpp:200: 6 == uc succeeded for: 6 == 6
ConditionTests.cpp:202: (std::numeric_limits<unsigned long>::max)() > ul succeeded for: 0x<hex digits> > 4
[Finished: './succeeding/conditions/int literals' All tests passed (13 assertions in 1 test case)]

[Running: ./succeeding/conditions//long_to_unsigned_x]
ConditionTests.cpp:223: long_var == unsigned_char_var succeeded for: 1 == 1
ConditionTests.cpp:224: long_var == unsigned_short_var succeeded for: 1 == 1
ConditionTests.cpp:225: long_var == unsigned_int_var succeeded for: 1 == 1
ConditionTests.cpp:226: long_var == unsigned_long_var succeeded for: 1 == 1
[Finished: './succeeding/conditions//long_to_unsigned_x' All tests passed (4 assertions in 1 test case)]

[Running: ./succeeding/conditions/const ints to int literal]
ConditionTests.cpp:237: unsigned_char_var == 1 succeeded for: 1 == 1
ConditionTests.cpp:238: unsigned_short_var == 1 succeeded for: 1 == 1
ConditionTests.cpp:239: unsigned_int_var == 1 succeeded for: 1 == 1
ConditionTests.cpp:240: unsigned_long_var == 1 succeeded for: 1 == 1
[Finished: './succeeding/conditions/const ints to int literal' All tests passed (4 assertions in 1 test case)]

[Running: ./succeeding/conditions/negative ints]
ConditionTests.cpp:246: ( -1 > 2u ) succeeded for: true
ConditionTests.cpp:247: -1 > 2u succeeded for: -1 > 2
ConditionTests.cpp:249: ( 2u < -1 ) succeeded for: true
ConditionTests.cpp:250: 2u < -1 succeeded for: 2 < -1
ConditionTests.cpp:253: ( minInt > 2u ) succeeded for: true
ConditionTests.cpp:254: minInt > 2u succeeded for: -2147483648 > 2
[Finished: './succeeding/conditions/negative ints' All tests passed (6 assertions in 1 test case)]

[Running: ./succeeding/conditions/computed ints]
ConditionTests.cpp:269: 54 == 6*9 succeeded for: 54 == 54
[Finished: './succeeding/conditions/computed ints' All tests passed (1 assertion in 1 test case)]

[Running: ./succeeding/conditions/ptr]
ConditionTests.cpp:285: p == __null succeeded for: __null == 0
ConditionTests.cpp:286: p == pNULL succeeded for: __null == __null
ConditionTests.cpp:291: p != __null succeeded for: 0x<hex digits> != 0
ConditionTests.cpp:294: cp != __null succeeded for: 0x<hex digits> != 0
ConditionTests.cpp:297: cpc != __null succeeded for: 0x<hex digits> != 0
ConditionTests.cpp:299: returnsNull() == __null succeeded for: {null string} == 0
ConditionTests.cpp:300: returnsConstNull() == __null succeeded for: {null string} == 0
ConditionTests.cpp:302: __null != p succeeded for: 0 != 0x<hex digits>
[Finished: './succeeding/conditions/ptr' All tests passed (8 assertions in 1 test case)]

[Running: ./succeeding/conditions/not]
ConditionTests.cpp:317: false == false succeeded
ConditionTests.cpp:318: true == true succeeded
ConditionTests.cpp:319: !false succeeded for: true
ConditionTests.cpp:320: !false succeeded
ConditionTests.cpp:322: !falseValue succeeded for: true
ConditionTests.cpp:323: !falseValue succeeded for: !false
ConditionTests.cpp:325: !(1 == 2) succeeded for: true
ConditionTests.cpp:326: !1 == 2 succeeded for: !(1 == 2)
[Finished: './succeeding/conditions/not' All tests passed (8 assertions in 1 test case)]

[Running: ./failing/conditions/not]
ConditionTests.cpp:334: false != false failed
ConditionTests.cpp:335: true != true failed
ConditionTests.cpp:336: !true failed for: false
ConditionTests.cpp:337: !true failed
ConditionTests.cpp:339: !trueValue failed for: false
ConditionTests.cpp:340: !trueValue failed for: !true
ConditionTests.cpp:342: !(1 == 1) failed for: false
ConditionTests.cpp:343: !1 == 1 failed for: !(1 == 1)
[Finished: './failing/conditions/not' 1 test case failed (All 8 assertions failed)]

[Running: ./succeeding/exceptions/explicit]
ExceptionTests.cpp:35: thisThrows() succeeded
ExceptionTests.cpp:36: thisDoesntThrow() succeeded
ExceptionTests.cpp:37: thisThrows() succeeded
[Finished: './succeeding/exceptions/explicit' All tests passed (3 assertions in 1 test case)]

[Running: ./failing/exceptions/explicit]
ExceptionTests.cpp:43: thisThrows() failed with unexpected exception with message: 'expected exception'
ExceptionTests.cpp:44: thisDoesntThrow() failed because no exception was thrown where one was expected
ExceptionTests.cpp:45: thisThrows() failed with unexpected exception with message: 'expected exception'
[Finished: './failing/exceptions/explicit' 1 test case failed (All 3 assertions failed)]

[Running: ./failing/exceptions/implicit]
ExceptionTests.cpp:48: Unexpected exception with message: 'unexpected exception'
[Finished: './failing/exceptions/implicit' 1 test case failed (1 assertion failed)]

[Running: ./failing/exceptions/implicit/2]
ExceptionTests.cpp:56: 1 == 1 succeeded
ExceptionTests.cpp:56: {Unknown expression after the reported line} failed with unexpected exception with message: 'unexpected exception'
[Finished: './failing/exceptions/implicit/2' 1 test case failed (1 of 2 assertions failed)]

[Running: ./failing/exceptions/implicit/3]

[Started section: 'section name']
ExceptionTests.cpp:62: Unexpected exception with message: 'unexpected exception'
[End of section: 'section name' 1 assertion failed]

[Finished: './failing/exceptions/implicit/3' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/exceptions/implicit]

No assertions in test case, './succeeding/exceptions/implicit'

[Finished: './succeeding/exceptions/implicit' 1 test case failed (1 assertion failed)]

[Running: ./failing/exceptions/custom]
ExceptionTests.cpp:106: Unexpected exception with message: 'custom exception'
[Finished: './failing/exceptions/custom' 1 test case failed (1 assertion failed)]

[Running: ./failing/exceptions/custom/nothrow]
ExceptionTests.cpp:113: throw CustomException( "unexpected custom exception" ) failed with unexpected exception with message: 'unexpected custom exception'
[Finished: './failing/exceptions/custom/nothrow' 1 test case failed (1 assertion failed)]

[Running: ./failing/exceptions/custom/throw]
ExceptionTests.cpp:118: throw CustomException( "custom exception - not std" ) failed with unexpected exception with message: 'custom exception - not std'
[Finished: './failing/exceptions/custom/throw' 1 test case failed (1 assertion failed)]

[Running: ./failing/exceptions/custom/double]
ExceptionTests.cpp:122: Unexpected exception with message: '3.14'
[Finished: './failing/exceptions/custom/double' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/exceptions/notimplemented]
ExceptionTests.cpp:133: thisFunctionNotImplemented( 7 ) succeeded
[Finished: './succeeding/exceptions/notimplemented' All tests passed (1 assertion in 1 test case)]

[Running: ./succeeding/generators/1]
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 2 == 2
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 200 == 200
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 4 == 4
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 200 == 200
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 6 == 6
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 200 == 200
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 8 == 8
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 200 == 200
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 10 == 10
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 200 == 200
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 30 == 30
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 200 == 200
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 40 == 40
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 200 == 200
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 42 == 42
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 200 == 200
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 72 == 72
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 200 == 200
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 2 == 2
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 202 == 202
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 4 == 4
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 202 == 202
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 6 == 6
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 202 == 202
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 8 == 8
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 202 == 202
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 10 == 10
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 202 == 202
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 30 == 30
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 202 == 202
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 40 == 40
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 202 == 202
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 42 == 42
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 202 == 202
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 72 == 72
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 202 == 202
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 2 == 2
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 204 == 204
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 4 == 4
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 204 == 204
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 6 == 6
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 204 == 204
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 8 == 8
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 204 == 204
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 10 == 10
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 204 == 204
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 30 == 30
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 204 == 204
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 40 == 40
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 204 == 204
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 42 == 42
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 204 == 204
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 72 == 72
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 204 == 204
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 2 == 2
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 206 == 206
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 4 == 4
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 206 == 206
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 6 == 6
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 206 == 206
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 8 == 8
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 206 == 206
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 10 == 10
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 206 == 206
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 30 == 30
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 206 == 206
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 40 == 40
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 206 == 206
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 42 == 42
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 206 == 206
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 72 == 72
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 206 == 206
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 2 == 2
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 208 == 208
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 4 == 4
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 208 == 208
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 6 == 6
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 208 == 208
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 8 == 8
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 208 == 208
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 10 == 10
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 208 == 208
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 30 == 30
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 208 == 208
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 40 == 40
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 208 == 208
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 42 == 42
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 208 == 208
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 72 == 72
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 208 == 208
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 2 == 2
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 210 == 210
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 4 == 4
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 210 == 210
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 6 == 6
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 210 == 210
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 8 == 8
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 210 == 210
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 10 == 10
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 210 == 210
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 30 == 30
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 210 == 210
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 40 == 40
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 210 == 210
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 42 == 42
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 210 == 210
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 72 == 72
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 210 == 210
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 2 == 2
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 212 == 212
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 4 == 4
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 212 == 212
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 6 == 6
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 212 == 212
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 8 == 8
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 212 == 212
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 10 == 10
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 212 == 212
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 30 == 30
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 212 == 212
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 40 == 40
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 212 == 212
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 42 == 42
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 212 == 212
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 72 == 72
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 212 == 212
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 2 == 2
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 214 == 214
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 4 == 4
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 214 == 214
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 6 == 6
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 214 == 214
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 8 == 8
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 214 == 214
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 10 == 10
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 214 == 214
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 30 == 30
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 214 == 214
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 40 == 40
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 214 == 214
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 42 == 42
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 214 == 214
GeneratorTests.cpp:26: multiply( i, 2 ) == i*2 succeeded for: 72 == 72
GeneratorTests.cpp:27: multiply( j, 2 ) == j*2 succeeded for: 214 == 214
[Finished: './succeeding/generators/1' All tests passed (144 assertions in 1 test case)]

[Running: ./succeeding/generators/2]
GeneratorTests.cpp:40: i->first == i->second-1 succeeded for: 0 == 0
GeneratorTests.cpp:40: i->first == i->second-1 succeeded for: 2 == 2
[Finished: './succeeding/generators/2' All tests passed (2 assertions in 1 test case)]

[Running: ./succeeding/message]
MessageTests.cpp:14: [warning: this is a warning]

No assertions in test case, './succeeding/message'

[Finished: './succeeding/message' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/succeed]
MessageTests.cpp:18:  succeeded
[with message: this is a success]
[Finished: './succeeding/succeed' All tests passed (1 assertion in 1 test case)]

[Running: ./failing/message/info/1]
MessageTests.cpp:26: a == 1 failed for: 2 == 1
[Finished: './failing/message/info/1' 1 test case failed (1 assertion failed)]

[Running: ./mixed/message/info/2]
MessageTests.cpp:33: a == 2 succeeded for: 2 == 2
MessageTests.cpp:37: a == 1 failed for: 2 == 1
MessageTests.cpp:41: a == 0 failed for: 2 == 0
MessageTests.cpp:45: a == 2 succeeded for: 2 == 2
[Finished: './mixed/message/info/2' 1 test case failed (2 of 4 assertions failed)]

[Running: ./failing/message/fail]
MessageTests.cpp:51: failed with message: 'This is a failure'
[Finished: './failing/message/fail' 1 test case failed (1 assertion failed)]

[Running: ./failing/message/sections]
[Started section: 'one']
MessageTests.cpp:58: failed with message: 'Message from section one'
[End of section: 'one' 1 assertion failed]

[Started section: 'two']
MessageTests.cpp:63: failed with message: 'Message from section two'
[End of section: 'two' 1 assertion failed]

[Finished: './failing/message/sections' 1 test case failed (All 2 assertions failed)]
Message from section one

[Running: ./succeeding/message/sections/stdout]
[Started section: 'one']

No assertions in section, 'one'

[End of section: 'one' 1 assertion failed]

Message from section two
[Started section: 'two']

No assertions in section, 'two'

[End of section: 'two' 1 assertion failed]

[Finished: './succeeding/message/sections/stdout' 1 test case failed (All 2 assertions failed)]

[Running: ./mixed/message/scoped]
MessageTests.cpp:86: i < 10 succeeded for: 0 < 10
MessageTests.cpp:86: i < 10 succeeded for: 1 < 10
MessageTests.cpp:86: i < 10 succeeded for: 2 < 10
MessageTests.cpp:86: i < 10 succeeded for: 3 < 10
MessageTests.cpp:86: i < 10 succeeded for: 4 < 10
MessageTests.cpp:86: i < 10 succeeded for: 5 < 10
MessageTests.cpp:86: i < 10 succeeded for: 6 < 10
MessageTests.cpp:86: i < 10 succeeded for: 7 < 10
MessageTests.cpp:86: i < 10 succeeded for: 8 < 10
MessageTests.cpp:86: i < 10 succeeded for: 9 < 10
MessageTests.cpp:86: i < 10 failed for: 10 < 10
[Finished: './mixed/message/scoped' 1 test case failed (1 of 11 assertions failed)]

[Running: ./succeeding/nofail]
MessageTests.cpp:92: 1 == 2 failed - but was ok

No assertions in test case, './succeeding/nofail'

[Finished: './succeeding/nofail' 1 test case failed (1 assertion failed)]

[Running: just info]

No assertions in test case, 'just info'

[Finished: 'just info' 1 test case failed (1 assertion failed)]

[Running: just failure]
MessageTests.cpp:101: failed with message: 'Previous info should not be seen'
[Finished: 'just failure' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/Misc/Sections]
[Started section: 's1']
MiscTests.cpp:21: a != b succeeded for: 1 != 2
MiscTests.cpp:22: b != a succeeded for: 2 != 1
[End of section: 's1' All 2 assertions passed]

[Started section: 's2']
MiscTests.cpp:27: a != b succeeded for: 1 != 2
[End of section: 's2' 1 assertion passed]

[Finished: './succeeding/Misc/Sections' All tests passed (3 assertions in 1 test case)]

[Running: ./succeeding/Misc/Sections/nested]
[Started section: 's1']
MiscTests.cpp:38: a != b succeeded for: 1 != 2
MiscTests.cpp:39: b != a succeeded for: 2 != 1
[Started section: 's2']
MiscTests.cpp:43: a != b succeeded for: 1 != 2
[End of section: 's2' 1 assertion passed]

[End of section: 's1' All 3 assertions passed]

[Finished: './succeeding/Misc/Sections/nested' All tests passed (3 assertions in 1 test case)]

[Running: ./mixed/Misc/Sections/nested2]
[Started section: 's1']
[Started section: 's2']
MiscTests.cpp:57: a == b failed for: 1 == 2
[End of section: 's2' 1 assertion failed]

[End of section: 's1' 1 assertion failed]

[Started section: 's1']
[Started section: 's3']
MiscTests.cpp:62: a != b succeeded for: 1 != 2
[End of section: 's3' 1 assertion passed]

[End of section: 's1' 1 assertion passed]

[Started section: 's1']
[Started section: 's4']
MiscTests.cpp:66: a < b succeeded for: 1 < 2
[End of section: 's4' 1 assertion passed]

[End of section: 's1' 1 assertion passed]

[Finished: './mixed/Misc/Sections/nested2' 1 test case failed (1 of 3 assertions failed)]

[Running: ./Sections/nested/a/b]
[Started section: 'c']
[Started section: 'd (leaf)']

No assertions in section, 'd (leaf)'

[End of section: 'd (leaf)' 1 assertion failed]

[End of section: 'c' 1 assertion failed]

[Started section: 'c']
[Started section: 'e (leaf)']

No assertions in section, 'e (leaf)'

[End of section: 'e (leaf)' 1 assertion failed]

[End of section: 'c' 1 assertion failed]

[Started section: 'f (leaf)']

No assertions in section, 'f (leaf)'

[End of section: 'f (leaf)' 1 assertion failed]

[Finished: './Sections/nested/a/b' 1 test case failed (All 3 assertions failed)]

[Running: ./mixed/Misc/Sections/loops]
[Started section: 's1']
MiscTests.cpp:99: b > a failed for: 0 > 1
[End of section: 's1' 1 assertion failed]

[Finished: './mixed/Misc/Sections/loops' 1 test case failed (1 assertion failed)]

[Running: ./mixed/Misc/loops]
MiscTests.cpp:111: ( fib[i] % 2 ) == 0 failed for: 1 == 0
MiscTests.cpp:111: ( fib[i] % 2 ) == 0 failed for: 1 == 0
MiscTests.cpp:111: ( fib[i] % 2 ) == 0 succeeded for: 0 == 0
MiscTests.cpp:111: ( fib[i] % 2 ) == 0 failed for: 1 == 0
MiscTests.cpp:111: ( fib[i] % 2 ) == 0 failed for: 1 == 0
MiscTests.cpp:111: ( fib[i] % 2 ) == 0 succeeded for: 0 == 0
MiscTests.cpp:111: ( fib[i] % 2 ) == 0 failed for: 1 == 0
MiscTests.cpp:111: ( fib[i] % 2 ) == 0 failed for: 1 == 0
[Finished: './mixed/Misc/loops' 1 test case failed (6 of 8 assertions failed)]
Some information
An error

[Running: ./succeeding/Misc/stdout,stderr]

No assertions in test case, './succeeding/Misc/stdout,stderr'

[Finished: './succeeding/Misc/stdout,stderr' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/Misc/null strings]
MiscTests.cpp:129: makeString( false ) != static_cast<char*>(__null) succeeded for: "valid string" != {null string}
MiscTests.cpp:130: makeString( true ) == static_cast<char*>(__null) succeeded for: {null string} == {null string}
[Finished: './succeeding/Misc/null strings' All tests passed (2 assertions in 1 test case)]

[Running: ./failing/info]
MiscTests.cpp:138: false failed
[Finished: './failing/info' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/checkedif]
MiscTests.cpp:143: flag succeeded for: true
MiscTests.cpp:151: testCheckedIf( true ) succeeded for: true
[Finished: './succeeding/checkedif' All tests passed (2 assertions in 1 test case)]

[Running: ./failing/checkedif]
MiscTests.cpp:143: flag failed for: false
MiscTests.cpp:156: testCheckedIf( false ) failed for: false
[Finished: './failing/checkedif' 1 test case failed (All 2 assertions failed)]

[Running: ./succeeding/checkedelse]
MiscTests.cpp:161: flag succeeded for: true
MiscTests.cpp:169: testCheckedElse( true ) succeeded for: true
[Finished: './succeeding/checkedelse' All tests passed (2 assertions in 1 test case)]

[Running: ./failing/checkedelse]
MiscTests.cpp:161: flag failed for: false
MiscTests.cpp:174: testCheckedElse( false ) failed for: false
[Finished: './failing/checkedelse' 1 test case failed (All 2 assertions failed)]

[Running: ./misc/xmlentitycheck]
[Started section: 'embedded xml']

No assertions in section, 'embedded xml'

[End of section: 'embedded xml' 1 assertion failed]

[Started section: 'encoded chars']

No assertions in section, 'encoded chars'

[End of section: 'encoded chars' 1 assertion failed]

[Finished: './misc/xmlentitycheck' 1 test case failed (All 2 assertions failed)]

[Running: ./manual/onechar]
MiscTests.cpp:192: false failed
[Finished: './manual/onechar' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/atomic if]
MiscTests.cpp:202: x == 0 succeeded for: 0 == 0
[Finished: './succeeding/atomic if' All tests passed (1 assertion in 1 test case)]

[Running: ./succeeding/matchers]
MiscTests.cpp:212: testStringForMatching() Contains( "string" ) succeeded for:
	"this string contains 'abc' as a substring" contains: "string"
MiscTests.cpp:213: testStringForMatching() Contains( "abc" ) succeeded for:
	"this string contains 'abc' as a substring" contains: "abc"
MiscTests.cpp:215: testStringForMatching() StartsWith( "this" ) succeeded for:
	"this string contains 'abc' as a substring" starts with: "this"
MiscTests.cpp:216: testStringForMatching() EndsWith( "substring" ) succeeded for:
	"this string contains 'abc' as a substring" ends with: "substring"
[Finished: './succeeding/matchers' All tests passed (4 assertions in 1 test case)]

[Running: ./failing/matchers/Contains]
MiscTests.cpp:221: testStringForMatching() Contains( "not there" ) failed for:
	"this string contains 'abc' as a substring" contains: "not there"
[Finished: './failing/matchers/Contains' 1 test case failed (1 assertion failed)]

[Running: ./failing/matchers/StartsWith]
MiscTests.cpp:226: testStringForMatching() StartsWith( "string" ) failed for:
	"this string contains 'abc' as a substring" starts with: "string"
[Finished: './failing/matchers/StartsWith' 1 test case failed (1 assertion failed)]

[Running: ./failing/matchers/EndsWith]
MiscTests.cpp:231: testStringForMatching() EndsWith( "this" ) failed for:
	"this string contains 'abc' as a substring" ends with: "this"
[Finished: './failing/matchers/EndsWith' 1 test case failed (1 assertion failed)]

[Running: ./failing/matchers/Equals]
MiscTests.cpp:236: testStringForMatching() Equals( "something else" ) failed for:
	"this string contains 'abc' as a substring" equals: "something else"
[Finished: './failing/matchers/Equals' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/matchers/AllOf]
MiscTests.cpp:244: testStringForMatching() AllOf( Catch::Contains( "string" ), Catch::Contains( "abc" ) ) succeeded for:
"this string contains 'abc' as a substring" ( contains: "string" and contains: "abc" )
[Finished: './succeeding/matchers/AllOf' All tests passed (1 assertion in 1 test case)]

[Running: ./succeeding/matchers/AnyOf]
MiscTests.cpp:248: testStringForMatching() AnyOf( Catch::Contains( "string" ), Catch::Contains( "not there" ) ) succeeded for:
"this string contains 'abc' as a substring" ( contains: "string" or contains: "not there" )
MiscTests.cpp:249: testStringForMatching() AnyOf( Catch::Contains( "not there" ), Catch::Contains( "string" ) ) succeeded for:
"this string contains 'abc' as a substring" ( contains: "not there" or contains: "string" )
[Finished: './succeeding/matchers/AnyOf' All tests passed (2 assertions in 1 test case)]

[Running: ./succeeding/matchers/Equals]
MiscTests.cpp:254: testStringForMatching() Equals( "this string contains 'abc' as a substring" ) succeeded for:
"this string contains 'abc' as a substring" equals: "this string contains 'abc' as a substring"
[Finished: './succeeding/matchers/Equals' All tests passed (1 assertion in 1 test case)]

[Running: example/factorial]
MiscTests.cpp:265: Factorial(0) == 1 succeeded for: 1 == 1
MiscTests.cpp:266: Factorial(1) == 1 succeeded for: 1 == 1
MiscTests.cpp:267: Factorial(2) == 2 succeeded for: 2 == 2
MiscTests.cpp:268: Factorial(3) == 6 succeeded for: 6 == 6
MiscTests.cpp:269: Factorial(10) == 3628800 succeeded for: 0x<hex digits> == 3628800
[Finished: 'example/factorial' All tests passed (5 assertions in 1 test case)]

[Running: empty]

No assertions in test case, 'empty'

[Finished: 'empty' 1 test case failed (1 assertion failed)]

[Running: Nice descriptive name]
MiscTests.cpp:278: [warning: This one ran]

No assertions in test case, 'Nice descriptive name'

[Finished: 'Nice descriptive name' 1 test case failed (1 assertion failed)]

[Running: first tag]

No assertions in test case, 'first tag'

[Finished: 'first tag' 1 test case failed (1 assertion failed)]

[Running: second tag]

No assertions in test case, 'second tag'

[Finished: 'second tag' 1 test case failed (1 assertion failed)]

[Running: selftest/main]
[Started section: 'selftest/expected result']
[Started section: 'selftest/expected result/failing tests']
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
catch_self_test.hpp:120:  succeeded
[with message: Tests failed, as expected]
[End of section: 'selftest/expected result/failing tests' All 26 assertions passed]

[End of section: 'selftest/expected result' All 26 assertions passed]

[Started section: 'selftest/expected result']
[Started section: 'selftest/expected result/succeeding tests']
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
Message from section one
Message from section two
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
Some information
An error
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
catch_self_test.hpp:109:  succeeded
[with message: Tests passed, as expected]
[End of section: 'selftest/expected result/succeeding tests' All 46 assertions passed]

[End of section: 'selftest/expected result' All 46 assertions passed]

Message from section one
Message from section two
Some information
An error
[Started section: 'selftest/test counts']
[Started section: 'selftest/test counts/succeeding tests']
TestMain.cpp:40: totals.assertions.passed == 296 succeeded for: 296 == 296
TestMain.cpp:41: totals.assertions.failed == 0 succeeded for: 0 == 0
[End of section: 'selftest/test counts/succeeding tests' All 2 assertions passed]

[End of section: 'selftest/test counts' All 2 assertions passed]

[Started section: 'selftest/test counts']
[Started section: 'selftest/test counts/failing tests']
TestMain.cpp:47: totals.assertions.passed == 1 succeeded for: 1 == 1
TestMain.cpp:48: totals.assertions.failed == 73 succeeded for: 73 == 73
[End of section: 'selftest/test counts/failing tests' All 2 assertions passed]

[End of section: 'selftest/test counts' All 2 assertions passed]

[Finished: 'selftest/main' All tests passed (76 assertions in 1 test case)]

[Running: meta/Misc/Sections]
TestMain.cpp:57: totals.assertions.passed == 2 succeeded for: 2 == 2
TestMain.cpp:58: totals.assertions.failed == 1 succeeded for: 1 == 1
[Finished: 'meta/Misc/Sections' All tests passed (2 assertions in 1 test case)]

[Running: selftest/parser/2]
[Started section: 'default']
TestMain.cpp:97: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:99: config.shouldDebugBreak == false succeeded for: false == false
TestMain.cpp:100: config.cutoff == -1 succeeded for: -1 == -1
TestMain.cpp:101: config.allowThrows == true succeeded for: true == true
TestMain.cpp:102: config.reporter.empty() succeeded for: true
[End of section: 'default' All 5 assertions passed]

[Started section: 'test lists']
[Started section: '-t/1']
TestMain.cpp:108: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:110: config.filters.size() == 1 succeeded for: 1 == 1
TestMain.cpp:111: config.filters[0].shouldInclude( fakeTestCase( "notIncluded" ) ) == false succeeded for: false == false
TestMain.cpp:112: config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) succeeded for: true
[End of section: '-t/1' All 4 assertions passed]

[End of section: 'test lists' All 4 assertions passed]

[Started section: 'test lists']
[Started section: '-t/exclude:1']
TestMain.cpp:116: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:118: config.filters.size() == 1 succeeded for: 1 == 1
TestMain.cpp:119: config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) == false succeeded for: false == false
TestMain.cpp:120: config.filters[0].shouldInclude( fakeTestCase( "alwaysIncluded" ) ) succeeded for: true
[End of section: '-t/exclude:1' All 4 assertions passed]

[End of section: 'test lists' All 4 assertions passed]

[Started section: 'test lists']
[Started section: '--test/1']
TestMain.cpp:125: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:127: config.filters.size() == 1 succeeded for: 1 == 1
TestMain.cpp:128: config.filters[0].shouldInclude( fakeTestCase( "notIncluded" ) ) == false succeeded for: false == false
TestMain.cpp:129: config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) succeeded for: true
[End of section: '--test/1' All 4 assertions passed]

[End of section: 'test lists' All 4 assertions passed]

[Started section: 'test lists']
[Started section: '--test/exclude:1']
TestMain.cpp:134: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:136: config.filters.size() == 1 succeeded for: 1 == 1
TestMain.cpp:137: config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) == false succeeded for: false == false
TestMain.cpp:138: config.filters[0].shouldInclude( fakeTestCase( "alwaysIncluded" ) ) succeeded for: true
[End of section: '--test/exclude:1' All 4 assertions passed]

[End of section: 'test lists' All 4 assertions passed]

[Started section: 'test lists']
[Started section: '--test/exclude:2']
TestMain.cpp:143: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:145: config.filters.size() == 1 succeeded for: 1 == 1
TestMain.cpp:146: config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) == false succeeded for: false == false
TestMain.cpp:147: config.filters[0].shouldInclude( fakeTestCase( "alwaysIncluded" ) ) succeeded for: true
[End of section: '--test/exclude:2' All 4 assertions passed]

[End of section: 'test lists' All 4 assertions passed]

[Started section: 'test lists']
[Started section: '-t/2']
TestMain.cpp:152: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:154: config.filters.size() == 1 succeeded for: 1 == 1
TestMain.cpp:155: config.filters[0].shouldInclude( fakeTestCase( "notIncluded" ) ) == false succeeded for: false == false
TestMain.cpp:156: config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) succeeded for: true
TestMain.cpp:157: config.filters[0].shouldInclude( fakeTestCase( "test2" ) ) succeeded for: true
[End of section: '-t/2' All 5 assertions passed]

[End of section: 'test lists' All 5 assertions passed]

[Started section: 'test lists']
[Started section: '-t/0']
TestMain.cpp:162: parseIntoConfigAndReturnError( argv, config ) Contains( "at least 1" ) succeeded for:
"Error while parsing arguments. Expected at least 1 argument." contains: "at least 1"
[End of section: '-t/0' 1 assertion passed]

[End of section: 'test lists' 1 assertion passed]

[Started section: 'reporter']
[Started section: '-r/console']
TestMain.cpp:169: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:171: config.reporter == "console" succeeded for: "console" == "console"
[End of section: '-r/console' All 2 assertions passed]

[End of section: 'reporter' All 2 assertions passed]

[Started section: 'reporter']
[Started section: '-r/xml']
TestMain.cpp:175: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:177: config.reporter == "xml" succeeded for: "xml" == "xml"
[End of section: '-r/xml' All 2 assertions passed]

[End of section: 'reporter' All 2 assertions passed]

[Started section: 'reporter']
[Started section: '--reporter/junit']
TestMain.cpp:181: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:183: config.reporter == "junit" succeeded for: "junit" == "junit"
[End of section: '--reporter/junit' All 2 assertions passed]

[End of section: 'reporter' All 2 assertions passed]

[Started section: 'reporter']
[Started section: '-r/error']
TestMain.cpp:187: parseIntoConfigAndReturnError( argv, config ) Contains( "1 argument" ) succeeded for:
"Error while parsing arguments. Expected 1 argument. Arguments were: one two" contains: "1 argument"
[End of section: '-r/error' 1 assertion passed]

[End of section: 'reporter' 1 assertion passed]

[Started section: 'debugger']
[Started section: '-b']
TestMain.cpp:194: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:196: config.shouldDebugBreak == true succeeded for: true == true
[End of section: '-b' All 2 assertions passed]

[End of section: 'debugger' All 2 assertions passed]

[Started section: 'debugger']
[Started section: '--break']
TestMain.cpp:200: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:202: config.shouldDebugBreak succeeded for: true
[End of section: '--break' All 2 assertions passed]

[End of section: 'debugger' All 2 assertions passed]

[Started section: 'debugger']
[Started section: '-b']
TestMain.cpp:206: parseIntoConfigAndReturnError( argv, config ) Contains( "0 arguments" ) succeeded for:
"Error while parsing arguments. Expected 0 arguments. Arguments were: unexpected" contains: "0 arguments"
[End of section: '-b' 1 assertion passed]

[End of section: 'debugger' 1 assertion passed]

[Started section: 'abort']
[Started section: '-a']
TestMain.cpp:213: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:215: config.cutoff == 1 succeeded for: 1 == 1
[End of section: '-a' All 2 assertions passed]

[End of section: 'abort' All 2 assertions passed]

[Started section: 'abort']
[Started section: '-a/2']
TestMain.cpp:219: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:221: config.cutoff == 2 succeeded for: 2 == 2
[End of section: '-a/2' All 2 assertions passed]

[End of section: 'abort' All 2 assertions passed]

[Started section: 'abort']
[Started section: '-a/error/0']
TestMain.cpp:225: parseIntoConfigAndReturnError( argv, config ) Contains( "greater than zero" ) succeeded for:
"Error while parsing arguments. threshold must be a number greater than zero. Arguments were: 0" contains: "greater than zero"
[End of section: '-a/error/0' 1 assertion passed]

[End of section: 'abort' 1 assertion passed]

[Started section: 'abort']
[Started section: '-a/error/non numeric']
TestMain.cpp:229: parseIntoConfigAndReturnError( argv, config ) Contains( "greater than zero" ) succeeded for:
"Error while parsing arguments. threshold must be a number greater than zero. Arguments were: oops" contains: "greater than zero"
[End of section: '-a/error/non numeric' 1 assertion passed]

[End of section: 'abort' 1 assertion passed]

[Started section: 'abort']
[Started section: '-a/error/two args']
TestMain.cpp:233: parseIntoConfigAndReturnError( argv, config ) Contains( "0 and 1 argument" ) succeeded for:
"Error while parsing arguments. Expected between 0 and 1 argument. Arguments were: 1 2" contains: "0 and 1 argument"
[End of section: '-a/error/two args' 1 assertion passed]

[End of section: 'abort' 1 assertion passed]

[Started section: 'nothrow']
[Started section: '-nt']
TestMain.cpp:240: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:242: config.allowThrows == false succeeded for: false == false
[End of section: '-nt' All 2 assertions passed]

[End of section: 'nothrow' All 2 assertions passed]

[Started section: 'nothrow']
[Started section: '--nothrow']
TestMain.cpp:246: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:248: config.allowThrows == false succeeded for: false == false
[End of section: '--nothrow' All 2 assertions passed]

[End of section: 'nothrow' All 2 assertions passed]

[Started section: 'streams']
[Started section: '-o filename']
TestMain.cpp:255: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:257: config.outputFilename == "filename.ext" succeeded for: "filename.ext" == "filename.ext"
TestMain.cpp:258: config.stream.empty() succeeded for: true
[End of section: '-o filename' All 3 assertions passed]

[End of section: 'streams' All 3 assertions passed]

[Started section: 'streams']
[Started section: '-o %stdout']
TestMain.cpp:262: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:264: config.stream == "stdout" succeeded for: "stdout" == "stdout"
TestMain.cpp:265: config.outputFilename.empty() succeeded for: true
[End of section: '-o %stdout' All 3 assertions passed]

[End of section: 'streams' All 3 assertions passed]

[Started section: 'streams']
[Started section: '--out']
TestMain.cpp:269: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:271: config.outputFilename == "filename.ext" succeeded for: "filename.ext" == "filename.ext"
[End of section: '--out' All 2 assertions passed]

[End of section: 'streams' All 2 assertions passed]

[Started section: 'combinations']
[Started section: '-a -b']
TestMain.cpp:278: parseIntoConfig( argv, config ) succeeded
TestMain.cpp:280: config.cutoff == 1 succeeded for: 1 == 1
TestMain.cpp:281: config.shouldDebugBreak succeeded for: true
TestMain.cpp:282: config.allowThrows == false succeeded for: false == false
[End of section: '-a -b' All 4 assertions passed]

[End of section: 'combinations' All 4 assertions passed]

[Finished: 'selftest/parser/2' All tests passed (66 assertions in 1 test case)]

[Running: selftest/test filter]
TestMain.cpp:291: matchAny.shouldInclude( fakeTestCase( "any" ) ) succeeded for: true
TestMain.cpp:292: matchNone.shouldInclude( fakeTestCase( "any" ) ) == false succeeded for: false == false
TestMain.cpp:297: matchHidden.shouldInclude( fakeTestCase( "any" ) ) == false succeeded for: false == false
TestMain.cpp:298: matchNonHidden.shouldInclude( fakeTestCase( "any" ) ) succeeded for: true
TestMain.cpp:300: matchHidden.shouldInclude( fakeTestCase( "./any" ) ) succeeded for: true
TestMain.cpp:301: matchNonHidden.shouldInclude( fakeTestCase( "./any" ) ) == false succeeded for: false == false
[Finished: 'selftest/test filter' All tests passed (6 assertions in 1 test case)]

[Running: selftest/test filters]
TestMain.cpp:312: matchHidden.shouldInclude( fakeTestCase( "./something" ) ) succeeded for: true
TestMain.cpp:314: filters.shouldInclude( fakeTestCase( "any" ) ) == false succeeded for: false == false
TestMain.cpp:315: filters.shouldInclude( fakeTestCase( "./something" ) ) succeeded for: true
TestMain.cpp:316: filters.shouldInclude( fakeTestCase( "./anything" ) ) == false succeeded for: false == false
[Finished: 'selftest/test filters' All tests passed (4 assertions in 1 test case)]

[Running: selftest/filter/prefix wildcard]
TestMain.cpp:322: matchBadgers.shouldInclude( fakeTestCase( "big badger" ) ) succeeded for: true
TestMain.cpp:323: matchBadgers.shouldInclude( fakeTestCase( "little badgers" ) ) == false succeeded for: false == false
[Finished: 'selftest/filter/prefix wildcard' All tests passed (2 assertions in 1 test case)]

[Running: selftest/filter/wildcard at both ends]
TestMain.cpp:328: matchBadgers.shouldInclude( fakeTestCase( "big badger" ) ) succeeded for: true
TestMain.cpp:329: matchBadgers.shouldInclude( fakeTestCase( "little badgers" ) ) succeeded for: true
TestMain.cpp:330: matchBadgers.shouldInclude( fakeTestCase( "badgers are big" ) ) succeeded for: true
TestMain.cpp:331: matchBadgers.shouldInclude( fakeTestCase( "hedgehogs" ) ) == false succeeded for: false == false
[Finished: 'selftest/filter/wildcard at both ends' All tests passed (4 assertions in 1 test case)]

[Running: selftest/option parsers]
TestMain.cpp:351: opt.parseIntoConfig( parser, config ) succeeded
TestMain.cpp:353: config.filters.size() == 1 succeeded for: 1 == 1
TestMain.cpp:354: config.filters[0].shouldInclude( fakeTestCase( "notIncluded" ) ) == false succeeded for: false == false
TestMain.cpp:355: config.filters[0].shouldInclude( fakeTestCase( "test1" ) ) succeeded for: true
[Finished: 'selftest/option parsers' All tests passed (4 assertions in 1 test case)]

[Running: selftest/tags]
[Started section: 'one tag']
TestMain.cpp:369: oneTag.getTestCaseInfo().description == "" succeeded for: "" == ""
TestMain.cpp:370: oneTag.hasTag( "one" ) succeeded for: true
TestMain.cpp:371: oneTag.getTags().size() == 1 succeeded for: 1 == 1
TestMain.cpp:373: oneTag.matchesTags( p1 ) == true succeeded for: true == true
TestMain.cpp:374: oneTag.matchesTags( p2 ) == true succeeded for: true == true
TestMain.cpp:375: oneTag.matchesTags( p3 ) == false succeeded for: false == false
TestMain.cpp:376: oneTag.matchesTags( p4 ) == false succeeded for: false == false
TestMain.cpp:377: oneTag.matchesTags( p5 ) == false succeeded for: false == false
[End of section: 'one tag' All 8 assertions passed]

[Started section: 'two tags']
TestMain.cpp:383: twoTags.getTestCaseInfo().description == "" succeeded for: "" == ""
TestMain.cpp:384: twoTags.hasTag( "one" ) succeeded for: true
TestMain.cpp:385: twoTags.hasTag( "two" ) succeeded for: true
TestMain.cpp:386: twoTags.hasTag( "three" ) == false succeeded for: false == false
TestMain.cpp:387: twoTags.getTags().size() == 2 succeeded for: 2 == 2
TestMain.cpp:389: twoTags.matchesTags( p1 ) == true succeeded for: true == true
TestMain.cpp:390: twoTags.matchesTags( p2 ) == true succeeded for: true == true
TestMain.cpp:391: twoTags.matchesTags( p3 ) == true succeeded for: true == true
TestMain.cpp:392: twoTags.matchesTags( p4 ) == true succeeded for: true == true
TestMain.cpp:393: twoTags.matchesTags( p5 ) == true succeeded for: true == true
[End of section: 'two tags' All 10 assertions passed]

[Started section: 'one tag with characters either side']
TestMain.cpp:399: oneTagWithExtras.getTestCaseInfo().description == "1234" succeeded for: "1234" == "1234"
TestMain.cpp:400: oneTagWithExtras.hasTag( "one" ) succeeded for: true
TestMain.cpp:401: oneTagWithExtras.hasTag( "two" ) == false succeeded for: false == false
TestMain.cpp:402: oneTagWithExtras.getTags().size() == 1 succeeded for: 1 == 1
[End of section: 'one tag with characters either side' All 4 assertions passed]

[Started section: 'start of a tag, but not closed']
TestMain.cpp:409: oneTagOpen.getTestCaseInfo().description == "[one" succeeded for: "[one" == "[one"
TestMain.cpp:410: oneTagOpen.hasTag( "one" ) == false succeeded for: false == false
TestMain.cpp:411: oneTagOpen.getTags().size() == 0 succeeded for: 0 == 0
[End of section: 'start of a tag, but not closed' All 3 assertions passed]

[Started section: 'hidden']
TestMain.cpp:417: oneTag.getTestCaseInfo().description == "" succeeded for: "" == ""
TestMain.cpp:418: oneTag.hasTag( "hide" ) succeeded for: true
TestMain.cpp:419: oneTag.isHidden() succeeded for: true
TestMain.cpp:421: oneTag.matchesTags( "~[hide]" ) == false succeeded for: false == false
[End of section: 'hidden' All 4 assertions passed]

[Finished: 'selftest/tags' All tests passed (29 assertions in 1 test case)]

[Running: ./succeeding/Tricky/std::pair]
TrickyTests.cpp:37: (std::pair<int, int>( 1, 2 )) == aNicePair succeeded for: std::pair( 1, 2 ) == std::pair( 1, 2 )
[Finished: './succeeding/Tricky/std::pair' All tests passed (1 assertion in 1 test case)]

[Running: ./inprogress/failing/Tricky/trailing expression]
TrickyTests.cpp:55: [warning: Uncomment the code in this test to check that it gives a sensible compiler error]

No assertions in test case, './inprogress/failing/Tricky/trailing expression'

[Finished: './inprogress/failing/Tricky/trailing expression' 1 test case failed (1 assertion failed)]

[Running: ./inprogress/failing/Tricky/compound lhs]
TrickyTests.cpp:71: [warning: Uncomment the code in this test to check that it gives a sensible compiler error]

No assertions in test case, './inprogress/failing/Tricky/compound lhs'

[Finished: './inprogress/failing/Tricky/compound lhs' 1 test case failed (1 assertion failed)]

[Running: ./failing/Tricky/non streamable type]
TrickyTests.cpp:95: &o1 == &o2 failed for: 0x<hex digits> == 0x<hex digits>
TrickyTests.cpp:96: o1 == o2 failed for: {?} == {?}
[Finished: './failing/Tricky/non streamable type' 1 test case failed (All 2 assertions failed)]

[Running: ./failing/string literals]
TrickyTests.cpp:106: std::string( "first" ) == "second" failed for: "first" == "second"
[Finished: './failing/string literals' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/side-effects]
TrickyTests.cpp:119: i++ == 7 succeeded for: 7 == 7
TrickyTests.cpp:120: i++ == 8 succeeded for: 8 == 8
[Finished: './succeeding/side-effects' All tests passed (2 assertions in 1 test case)]

[Running: ./succeeding/koenig]
TrickyTests.cpp:186: 0x<hex digits> == o succeeded for: 0x<hex digits> == {?}
[Finished: './succeeding/koenig' All tests passed (1 assertion in 1 test case)]

[Running: ./succeeding/non-const==]
TrickyTests.cpp:212: t == 1u succeeded for: {?} == 1
[Finished: './succeeding/non-const==' All tests passed (1 assertion in 1 test case)]

[Running: ./succeeding/enum/bits]
TrickyTests.cpp:224: 0x<hex digits> == bit30and31 succeeded for: 0x<hex digits> == 3221225472
[Finished: './succeeding/enum/bits' All tests passed (1 assertion in 1 test case)]

[Running: ./succeeding/boolean member]
TrickyTests.cpp:239: obj.prop != __null succeeded for: 0x<hex digits> != 0
[Finished: './succeeding/boolean member' All tests passed (1 assertion in 1 test case)]

[Running: ./succeeding/unimplemented static bool]
[Started section: 'compare to true']
TrickyTests.cpp:259: is_true<true>::value == true succeeded for: true == true
TrickyTests.cpp:260: true == is_true<true>::value succeeded for: true == true
[End of section: 'compare to true' All 2 assertions passed]

[Started section: 'compare to false']
TrickyTests.cpp:264: is_true<false>::value == false succeeded for: false == false
TrickyTests.cpp:265: false == is_true<false>::value succeeded for: false == false
[End of section: 'compare to false' All 2 assertions passed]

[Started section: 'negation']
TrickyTests.cpp:270: !is_true<false>::value succeeded for: true
[End of section: 'negation' 1 assertion passed]

[Started section: 'double negation']
TrickyTests.cpp:275: !!is_true<true>::value succeeded for: true
[End of section: 'double negation' 1 assertion passed]

[Started section: 'direct']
TrickyTests.cpp:280: is_true<true>::value succeeded for: true
TrickyTests.cpp:281: !is_true<false>::value succeeded for: !false
[End of section: 'direct' All 2 assertions passed]

[Finished: './succeeding/unimplemented static bool' All tests passed (8 assertions in 1 test case)]

[Running: ./succeeding/SafeBool]
TrickyTests.cpp:313: True succeeded for: true
TrickyTests.cpp:314: !False succeeded for: true
TrickyTests.cpp:315: !False succeeded for: !false
[Finished: './succeeding/SafeBool' All tests passed (3 assertions in 1 test case)]

[Running: Assertions then sections]
TrickyTests.cpp:323: Catch::isTrue( true ) succeeded for: true
[Started section: 'A section']
TrickyTests.cpp:327: Catch::isTrue( true ) succeeded for: true
[Started section: 'Another section']
TrickyTests.cpp:331: Catch::isTrue( true ) succeeded for: true
[End of section: 'Another section' 1 assertion passed]

[End of section: 'A section' All 2 assertions passed]

TrickyTests.cpp:323: Catch::isTrue( true ) succeeded for: true
[Started section: 'A section']
TrickyTests.cpp:327: Catch::isTrue( true ) succeeded for: true
[Started section: 'Another other section']
TrickyTests.cpp:335: Catch::isTrue( true ) succeeded for: true
[End of section: 'Another other section' 1 assertion passed]

[End of section: 'A section' All 2 assertions passed]

[Finished: 'Assertions then sections' All tests passed (6 assertions in 1 test case)]

[Running: Scenario: Do that thing with the thing]
[Started section: 'Given: This stuff exists']
[Started section: ' When: I do this']
[Started section: ' Then: it should do this']
BDDTests.cpp:21: itDoesThis() succeeded for: true
[Started section: '  And: do that']
BDDTests.cpp:23: itDoesThat() succeeded for: true
[End of section: '  And: do that' 1 assertion passed]

[End of section: ' Then: it should do this' All 2 assertions passed]

[End of section: ' When: I do this' All 2 assertions passed]

[End of section: 'Given: This stuff exists' All 2 assertions passed]

[Finished: 'Scenario: Do that thing with the thing' All tests passed (2 assertions in 1 test case)]
[End of group: '~dummy'. 47 of 101 test cases failed (104 of 625 assertions failed)]


[Testing completed. 47 of 101 test cases failed (104 of 625 assertions failed)]

[Started testing: CatchSelfTest]
[Started group: '~dummy']

[Running: ./succeeding/Approx/simple]
ApproxTests.cpp:20: d == Approx( 1.23 ) succeeded for: 1.23 == Approx( 1.23 )
ApproxTests.cpp:21: d != Approx( 1.22 ) succeeded for: 1.23 != Approx( 1.22 )
ApproxTests.cpp:22: d != Approx( 1.24 ) succeeded for: 1.23 != Approx( 1.24 )
ApproxTests.cpp:24: Approx( d ) == 1.23 succeeded for: Approx( 1.23 ) == 1.23
ApproxTests.cpp:25: Approx( d ) != 1.22 succeeded for: Approx( 1.23 ) != 1.22
ApproxTests.cpp:26: Approx( d ) != 1.24 succeeded for: Approx( 1.23 ) != 1.24
[Finished: './succeeding/Approx/simple' All tests passed (6 assertions in 1 test case)]

[Running: ./succeeding/Approx/epsilon]
ApproxTests.cpp:38: d != Approx( 1.231 ) succeeded for: 1.23 != Approx( 1.231 )
ApproxTests.cpp:39: d == Approx( 1.231 ).epsilon( 0.1 ) succeeded for: 1.23 == Approx( 1.231 )
[Finished: './succeeding/Approx/epsilon' All tests passed (2 assertions in 1 test case)]

[Running: ./succeeding/Approx/float]
ApproxTests.cpp:49: 1.23f == Approx( 1.23f ) succeeded for: 1.23 == Approx( 1.23 )
ApproxTests.cpp:50: 0.0f == Approx( 0.0f ) succeeded for: 0 == Approx( 0 )
[Finished: './succeeding/Approx/float' All tests passed (2 assertions in 1 test case)]

[Running: ./succeeding/Approx/int]
ApproxTests.cpp:60: 1 == Approx( 1 ) succeeded
ApproxTests.cpp:61: 0 == Approx( 0 ) succeeded
[Finished: './succeeding/Approx/int' All tests passed (2 assertions in 1 test case)]

[Running: ./succeeding/Approx/mixed]
ApproxTests.cpp:75: 1.0f == Approx( 1 ) succeeded for: 1 == Approx( 1 )
ApproxTests.cpp:76: 0 == Approx( dZero) succeeded for: 0 == Approx( 0 )
ApproxTests.cpp:77: 0 == Approx( dSmall ).epsilon( 0.001 ) succeeded for: 0 == Approx( 1e-05 )
ApproxTests.cpp:78: 1.234f == Approx( dMedium ) succeeded for: 1.234 == Approx( 1.234 )
ApproxTests.cpp:79: dMedium == Approx( 1.234f ) succeeded for: 1.234 == Approx( 1.234 )
[Finished: './succeeding/Approx/mixed' All tests passed (5 assertions in 1 test case)]

[Running: ./succeeding/Approx/custom]
ApproxTests.cpp:93: d == approx( 1.23 ) succeeded for: 1.23 == Approx( 1.23 )
ApproxTests.cpp:94: d == approx( 1.22 ) succeeded for: 1.23 == Approx( 1.22 )
ApproxTests.cpp:95: d == approx( 1.24 ) succeeded for: 1.23 == Approx( 1.24 )
ApproxTests.cpp:96: d != approx( 1.25 ) succeeded for: 1.23 != Approx( 1.25 )
ApproxTests.cpp:98: approx( d ) == 1.23 succeeded for: Approx( 1.23 ) == 1.23
ApproxTests.cpp:99: approx( d ) == 1.22 succeeded for: Approx( 1.23 ) == 1.22
ApproxTests.cpp:100: approx( d ) == 1.24 succeeded for: Approx( 1.23 ) == 1.24
ApproxTests.cpp:101: approx( d ) != 1.25 succeeded for: Approx( 1.23 ) != 1.25
[Finished: './succeeding/Approx/custom' All tests passed (8 assertions in 1 test case)]

[Running: Approximate PI]
ApproxTests.cpp:110: divide( 22, 7 ) == Approx( 3.141 ).epsilon( 0.001 ) succeeded for: 3.142857142857143 == Approx( 3.141 )
ApproxTests.cpp:111: divide( 22, 7 ) != Approx( 3.141 ).epsilon( 0.0001 ) succeeded for: 3.142857142857143 != Approx( 3.141 )
[Finished: 'Approximate PI' All tests passed (2 assertions in 1 test case)]

[Running: ./succeeding/TestClass/succeedingCase]
ClassTests.cpp:24: s == "hello" succeeded for: "hello" == "hello"
[Finished: './succeeding/TestClass/succeedingCase' All tests passed (1 assertion in 1 test case)]

[Running: ./failing/TestClass/failingCase]
ClassTests.cpp:28: s == "world" failed for: "hello" == "world"
[Finished: './failing/TestClass/failingCase' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/Fixture/succeedingCase]
ClassTests.cpp:47: m_a == 1 succeeded for: 1 == 1
[Finished: './succeeding/Fixture/succeedingCase' All tests passed (1 assertion in 1 test case)]

[Running: ./failing/Fixture/failingCase]
ClassTests.cpp:55: m_a == 2 failed for: 1 == 2
[Finished: './failing/Fixture/failingCase' 1 test case failed (1 assertion failed)]

[Running: ./succeeding/conditions/equality]
ConditionTests.cpp:55: data.int_seven == 7 succeeded for: 7 == 7
ConditionTests.cpp:56: data.float_nine_point_one == Approx( 9.1f ) succeeded for: 9.1 == Approx( 9.1 )
ConditionTests.cpp:57: data.double_pi == Approx( 3.1415926535 ) succeeded for: 3.1415926535 == Approx( 3.14159 )
ConditionTests.cpp:58: data.str_hello == "hello" succeeded for: "hello" == "hello"
ConditionTests.cpp:59: "hello" == data.str_hello succeeded for: "hello" == "hello"
ConditionTests.cpp:60: data.str_hello.size() == 5 succeeded for: 5 == 5
ConditionTests.cpp:63: x == Approx( 1.3 ) succeeded for: 1.3 == Approx( 1.3 )
[Finished: './succeeding/conditions/equality' All tests passed (7 assertions in 1 test case)]

[Running: ./failing/conditions/equality]
ConditionTests.cpp:71: data.int_seven == 6 failed for: 7 == 6
ConditionTests.cpp:72: data.int_seven == 8 failed for: 7 == 8
[Finished: './failing/conditions/equality' 1 test case failed (All 2 assertions failed)]
[End of group: '~dummy'. 3 of 13 test cases failed (4 of 40 assertions failed)]


[Testing aborted. 3 of 13 test cases failed (4 of 40 assertions failed)]

